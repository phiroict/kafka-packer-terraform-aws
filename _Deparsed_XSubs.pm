#
#
# DO NOT EDIT THIS FILE, IT'S AUTOGENERATED FROM XS MODULES AND WILL BE UPDATED AUTOMATICALLY
#
#
package Audio::XMMSClient {
sub DESTROY;
sub bindata_add;
sub bindata_list;
sub bindata_remove;
sub bindata_retrieve;
sub broadcast_collection_changed;
sub broadcast_config_value_changed;
sub broadcast_mediainfo_reader_status;
sub broadcast_medialib_entry_added;
sub broadcast_medialib_entry_changed;
sub broadcast_medialib_entry_updated;
sub broadcast_playback_current_id;
sub broadcast_playback_status;
sub broadcast_playback_volume_changed;
sub broadcast_playlist_changed;
sub broadcast_playlist_current_pos;
sub broadcast_playlist_loaded;
sub broadcast_quit;
sub coll_find;
sub coll_get;
sub coll_idlist_from_playlist_file;
sub coll_list;
sub coll_query;
sub coll_query_ids;
sub coll_query_infos;
sub coll_remove;
sub coll_rename;
sub coll_save;
sub coll_sync;
sub config_get_value;
sub config_list_values;
sub config_register_value;
sub config_set_value;
sub connect;
sub disconnect_callback_set;
sub get_last_error;
sub io_disconnect;
sub io_fd_get;
sub io_in_handle;
sub io_need_out_callback_set;
sub io_out_handle;
sub io_want_out;
sub main_list_plugins;
sub main_stats;
sub medialib_add_entry;
sub medialib_add_entry_args;
sub medialib_add_entry_encoded;
sub medialib_entry_property_remove;
sub medialib_entry_property_remove_with_source;
sub medialib_entry_property_set_int;
sub medialib_entry_property_set_int_with_source;
sub medialib_entry_property_set_str;
sub medialib_entry_property_set_str_with_source;
sub medialib_get_id;
sub medialib_get_info;
sub medialib_import_path;
sub medialib_import_path_encoded;
sub medialib_move_entry;
sub medialib_path_import;
sub medialib_path_import_encoded;
sub medialib_rehash;
sub medialib_remove_entry;
sub new;
sub playback_current_id;
sub playback_pause;
sub playback_playtime;
sub playback_seek_ms;
sub playback_seek_samples;
sub playback_start;
sub playback_status;
sub playback_stop;
sub playback_tickle;
sub playback_volume_get;
sub playback_volume_set;
sub playlist;
sub playlist_current_active;
sub playlist_list;
sub playlist_set_next;
sub playlist_set_next_rel;
sub quit;
sub signal_mediainfo_reader_unindexed;
sub signal_playback_playtime;
sub userconfdir_get;
sub xform_media_browse;
sub xform_media_browse_encoded;
}
package Audio::XMMSClient::Collection {
sub DESTROY;
sub add_operand;
sub attribute_get;
sub attribute_get_string;
sub attribute_list;
sub attribute_remove;
sub attribute_set;
sub attribute_set_string;
sub get_idlist;
sub get_type;
sub idlist_append;
sub idlist_clear;
sub idlist_get_index;
sub idlist_get_size;
sub idlist_insert;
sub idlist_move;
sub idlist_set_index;
sub new;
sub operand_list;
sub operands;
sub parse;
sub remove_operand;
sub set_idlist;
sub universe;
}
package Audio::XMMSClient::Playlist {
sub DESTROY;
sub add_args;
sub add_collection;
sub add_encoded;
sub add_id;
sub add_url;
sub clear;
sub create;
sub current_pos;
sub insert_args;
sub insert_collection;
sub insert_encoded;
sub insert_id;
sub insert_url;
sub list_entries;
sub load;
sub move_entry;
sub radd;
sub radd_encoded;
sub remove;
sub remove_entry;
sub rinsert;
sub rinsert_encoded;
sub shuffle;
sub sort;
}
package Audio::XMMSClient::Result {
sub DESTROY;
sub get_class;
sub get_error;
sub get_type;
sub iserror;
sub notifier_set;
sub value;
sub wait;
}
package B {
sub CLONE;
sub address;
sub amagic_generation;
sub begin_av;
sub cast_I32;
sub cchar;
sub check_av;
sub comppadlist;
sub cstring;
sub curstash;
sub defstash;
sub diehook;
sub dowarn;
sub end_av;
sub formfeed;
sub hash;
sub inc_gv;
sub init_av;
sub main_cv;
sub main_root;
sub main_start;
sub minus_c;
sub opnumber;
sub perlstring;
sub ppname;
sub regex_padav;
sub save_BEGINs;
sub sub_generation;
sub sv_no;
sub sv_undef;
sub sv_yes;
sub svref_2object;
sub threadsv_names;
sub unitcheck_av;
sub walkoptree;
sub walkoptree_debug;
sub warnhook;
}
package B::AV {
sub ARRAY;
sub ARRAYelt;
sub FILL;
sub MAX;
}
package B::BINOP {
sub last;
}
package B::BM {
sub PREVIOUS;
sub RARE;
sub TABLE;
sub USEFUL;
}
package B::COP {
sub arybase;
sub cop_seq;
sub file;
sub filegv;
sub hints;
sub hints_hash;
sub io;
sub label;
sub line;
sub stash;
sub stashoff;
sub stashpv;
sub warnings;
}
package B::CV {
sub CONST;
sub CvFLAGS;
sub DEPTH;
sub FILE;
sub GV;
sub HSCXT;
sub NAME_HEK;
sub OUTSIDE;
sub OUTSIDE_SEQ;
sub PADLIST;
sub ROOT;
sub START;
sub STASH;
sub XSUB;
sub XSUBANY;
sub const_sv;
}
package B::Deparse {
sub main_cv;
sub main_root;
sub main_start;
sub opnumber;
sub perlstring;
sub svref_2object;
}
package B::FM {
sub LINES;
}
package B::GV {
sub AV;
sub CV;
sub CVGEN;
sub EGV;
sub FILE;
sub FILEGV;
sub FORM;
sub GP;
sub GPFLAGS;
sub GvFLAGS;
sub GvREFCNT;
sub HV;
sub IO;
sub LINE;
sub NAME;
sub STASH;
sub SV;
sub isGV_with_GP;
sub is_empty;
}
package B::HE {
sub HASH;
sub SVKEY_force;
sub VAL;
}
package B::HV {
sub ARRAY;
sub FILL;
sub KEYS;
sub MAX;
sub NAME;
sub RITER;
}
package B::IO {
sub BOTTOM_GV;
sub BOTTOM_NAME;
sub FMT_GV;
sub FMT_NAME;
sub IoFLAGS;
sub IoTYPE;
sub IsSTD;
sub LINES;
sub LINES_LEFT;
sub PAGE;
sub PAGE_LEN;
sub TOP_GV;
sub TOP_NAME;
}
package B::IV {
sub IV;
sub IVX;
sub RV;
sub UVX;
sub needs64bits;
sub packiv;
}
package B::LISTOP {
sub children;
}
package B::LOGOP {
sub other;
}
package B::LOOP {
sub lastop;
sub nextop;
sub redoop;
}
package B::MAGIC {
sub FLAGS;
sub LENGTH;
sub MOREMAGIC;
sub OBJ;
sub PRIVATE;
sub PTR;
sub REGEX;
sub TYPE;
sub precomp;
}
package B::METHOP {
sub first;
sub meth_sv;
sub rclass;
}
package B::NV {
sub NV;
sub NVX;
}
package B::OP {
sub desc;
sub flags;
sub folded;
sub moresib;
sub name;
sub next;
sub oplist;
sub opt;
sub parent;
sub ppaddr;
sub private;
sub savefree;
sub sibling;
sub size;
sub slabbed;
sub spare;
sub static;
sub targ;
sub type;
}
package B::PADLIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub NAMES;
sub REFCNT;
sub id;
sub outid;
}
package B::PADNAME {
sub COP_SEQ_RANGE_HIGH;
sub COP_SEQ_RANGE_LOW;
sub FLAGS;
sub LEN;
sub OURSTASH;
sub PARENT_FAKELEX_FLAGS;
sub PARENT_PAD_INDEX;
sub PROTOCV;
sub PV;
sub PVX;
sub REFCNT;
sub SvSTASH;
sub TYPE;
}
package B::PADNAMELIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub REFCNT;
}
package B::PADOP {
sub gv;
sub padix;
sub sv;
}
package B::PMOP {
sub code_list;
sub pmflags;
sub pmoffset;
sub pmregexp;
sub pmreplroot;
sub pmreplstart;
sub pmstash;
sub pmstashpv;
sub precomp;
sub reflags;
}
package B::PV {
sub CUR;
sub LEN;
sub PV;
sub PVBM;
sub PVX;
sub RV;
sub as_string;
}
package B::PVLV {
sub TARG;
sub TARGLEN;
sub TARGOFF;
sub TYPE;
}
package B::PVMG {
sub MAGIC;
sub SvSTASH;
}
package B::PVOP {
sub pv;
}
package B::REGEXP {
sub REGEX;
sub compflags;
sub precomp;
sub qr_anoncv;
}
package B::RHE {
sub HASH;
}
package B::SV {
sub FLAGS;
sub MAGICAL;
sub POK;
sub REFCNT;
sub ROK;
sub SvTYPE;
sub object_2svref;
}
package B::SVOP {
sub gv;
sub sv;
}
package B::UNOP {
sub first;
}
package B::UNOP_AUX {
sub aux_list;
sub string;
}
package Cairo {
sub HAS_FT_FONT;
sub HAS_PDF_SURFACE;
sub HAS_PNG_FUNCTIONS;
sub HAS_PS_SURFACE;
sub HAS_RECORDING_SURFACE;
sub HAS_SVG_SURFACE;
sub LIB_VERSION;
sub LIB_VERSION_ENCODE;
sub VERSION_ENCODE;
sub lib_version;
sub lib_version_string;
sub version;
sub version_string;
}
package Cairo::Context {
sub DESTROY;
sub append_path;
sub arc;
sub arc_negative;
sub clip;
sub clip_extents;
sub clip_preserve;
sub close_path;
sub copy_clip_rectangle_list;
sub copy_page;
sub copy_path;
sub copy_path_flat;
sub create;
sub curve_to;
sub device_to_user;
sub device_to_user_distance;
sub fill;
sub fill_extents;
sub fill_preserve;
sub font_extents;
sub get_antialias;
sub get_current_point;
sub get_dash;
sub get_fill_rule;
sub get_font_face;
sub get_font_matrix;
sub get_font_options;
sub get_group_target;
sub get_line_cap;
sub get_line_join;
sub get_line_width;
sub get_matrix;
sub get_miter_limit;
sub get_operator;
sub get_scaled_font;
sub get_source;
sub get_target;
sub get_tolerance;
sub glyph_extents;
sub glyph_path;
sub has_current_point;
sub identity_matrix;
sub in_clip;
sub in_fill;
sub in_stroke;
sub line_to;
sub mask;
sub mask_surface;
sub move_to;
sub new_path;
sub new_sub_path;
sub paint;
sub paint_with_alpha;
sub path_extents;
sub pop_group;
sub pop_group_to_source;
sub push_group;
sub push_group_with_content;
sub rectangle;
sub rel_curve_to;
sub rel_line_to;
sub rel_move_to;
sub reset_clip;
sub restore;
sub rotate;
sub save;
sub scale;
sub select_font_face;
sub set_antialias;
sub set_dash;
sub set_fill_rule;
sub set_font_face;
sub set_font_matrix;
sub set_font_options;
sub set_font_size;
sub set_line_cap;
sub set_line_join;
sub set_line_width;
sub set_matrix;
sub set_miter_limit;
sub set_operator;
sub set_scaled_font;
sub set_source;
sub set_source_rgb;
sub set_source_rgba;
sub set_source_surface;
sub set_tolerance;
sub show_glyphs;
sub show_page;
sub show_text;
sub show_text_glyphs;
sub status;
sub stroke;
sub stroke_extents;
sub stroke_preserve;
sub text_extents;
sub text_path;
sub transform;
sub translate;
sub user_to_device;
sub user_to_device_distance;
}
package Cairo::FontFace {
sub DESTROY;
sub get_type;
sub status;
}
package Cairo::FontOptions {
sub DESTROY;
sub create;
sub equal;
sub get_antialias;
sub get_hint_metrics;
sub get_hint_style;
sub get_subpixel_order;
sub hash;
sub merge;
sub set_antialias;
sub set_hint_metrics;
sub set_hint_style;
sub set_subpixel_order;
sub status;
}
package Cairo::Format {
sub stride_for_width;
}
package Cairo::FtFontFace {
sub create;
}
package Cairo::Gradient {
sub add_color_stop_rgb;
sub add_color_stop_rgba;
sub get_color_stops;
}
package Cairo::ImageSurface {
sub create;
sub create_for_data;
sub create_from_png;
sub create_from_png_stream;
sub get_data;
sub get_format;
sub get_height;
sub get_stride;
sub get_width;
}
package Cairo::LinearGradient {
sub create;
sub get_points;
}
package Cairo::Matrix {
sub DESTROY;
sub init;
sub init_identity;
sub init_rotate;
sub init_scale;
sub init_translate;
sub invert;
sub multiply;
sub rotate;
sub scale;
sub transform_distance;
sub transform_point;
sub translate;
}
package Cairo::Path {
sub DESTROY;
sub FETCH;
sub FETCHSIZE;
}
package Cairo::Path::Data {
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
}
package Cairo::Path::Point {
sub FETCH;
sub FETCHSIZE;
sub STORE;
}
package Cairo::Path::Points {
sub FETCH;
sub FETCHSIZE;
sub STORE;
}
package Cairo::Pattern {
sub DESTROY;
sub get_extend;
sub get_filter;
sub get_matrix;
sub get_type;
sub set_extend;
sub set_filter;
sub set_matrix;
sub status;
}
package Cairo::PdfSurface {
sub create;
sub create_for_stream;
sub get_versions;
sub restrict_to_version;
sub set_size;
sub version_to_string;
}
package Cairo::PsSurface {
sub create;
sub create_for_stream;
sub dsc_begin_page_setup;
sub dsc_begin_setup;
sub dsc_comment;
sub get_eps;
sub get_levels;
sub level_to_string;
sub restrict_to_level;
sub set_eps;
sub set_size;
}
package Cairo::RadialGradient {
sub create;
sub get_circles;
}
package Cairo::RecordingSurface {
sub create;
sub ink_extents;
}
package Cairo::Region {
sub DESTROY;
sub contains_point;
sub contains_rectangle;
sub create;
sub equal;
sub get_extents;
sub get_rectangle;
sub intersect;
sub intersect_rectangle;
sub is_empty;
sub num_rectangles;
sub status;
sub subtract;
sub subtract_rectangle;
sub translate;
sub union;
sub union_rectangle;
sub xor;
sub xor_rectangle;
}
package Cairo::ScaledFont {
sub DESTROY;
sub create;
sub extents;
sub get_ctm;
sub get_font_face;
sub get_font_matrix;
sub get_font_options;
sub get_scale_matrix;
sub get_type;
sub glyph_extents;
sub status;
sub text_extents;
sub text_to_glyphs;
}
package Cairo::SolidPattern {
sub create_rgb;
sub create_rgba;
sub get_rgba;
}
package Cairo::Surface {
sub DESTROY;
sub copy_page;
sub create_for_rectangle;
sub create_similar;
sub finish;
sub flush;
sub get_content;
sub get_device_offset;
sub get_fallback_resolution;
sub get_font_options;
sub get_type;
sub has_show_text_glyphs;
sub mark_dirty;
sub mark_dirty_rectangle;
sub set_device_offset;
sub set_fallback_resolution;
sub show_page;
sub status;
sub write_to_png;
sub write_to_png_stream;
}
package Cairo::SurfacePattern {
sub create;
sub get_surface;
}
package Cairo::SvgSurface {
sub create;
sub create_for_stream;
sub get_versions;
sub restrict_to_version;
sub version_to_string;
}
package Cairo::ToyFontFace {
sub create;
sub get_family;
sub get_slant;
sub get_weight;
}
package Carp {
sub _maybe_isa;
sub downgrade;
sub is_utf8;
}
package Compress::Raw::Bunzip2 {
sub DESTROY;
sub DispStream;
sub bzinflate;
sub compressedBytes;
sub inflateCount;
sub new;
sub status;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Bzip2 {
sub DESTROY;
sub DispStream;
sub bzclose;
sub bzdeflate;
sub bzflush;
sub bzlibversion;
sub compressedBytes;
sub constant;
sub new;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Zlib {
sub ZLIB_VERNUM;
sub _deflateInit;
sub _inflateInit;
sub _inflateScanInit;
sub adler32;
sub adler32_combine;
sub constant;
sub crc32;
sub crc32_combine;
sub zlibCompileFlags;
sub zlib_version;
}
package Compress::Raw::Zlib::deflateStream {
sub DESTROY;
sub DispStream;
sub _deflateParams;
sub adler32;
sub compressedBytes;
sub crc32;
sub deflate;
sub deflateReset;
sub deflateTune;
sub dict_adler;
sub flush;
sub get_Bufsize;
sub get_Level;
sub get_Strategy;
sub msg;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateScanStream {
sub DESTROY;
sub DispStream;
sub _createDeflateStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub getEndOffset;
sub getLastBlockOffset;
sub getLastBufferOffset;
sub inflateCount;
sub inflateReset;
sub resetLastBlockByte;
sub scan;
sub status;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateStream {
sub DESTROY;
sub DispStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub dict_adler;
sub get_Bufsize;
sub inflate;
sub inflateCount;
sub inflateReset;
sub inflateSync;
sub msg;
sub set_Append;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Config {
sub AUTOLOAD;
}
package Cwd {
sub CLONE;
sub abs_path;
sub fastcwd;
sub getcwd;
sub realpath;
}
package DB_File {
sub DELETE;
sub DESTROY;
sub DoTie_;
sub EXISTS;
sub FETCH;
sub FETCHSIZE;
sub FIRSTKEY;
sub NEXTKEY;
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_EXLOCK() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_TEMPORARY() ;
sub POP;
sub PUSH;
sub SHIFT;
sub STORE;
sub UNSHIFT;
sub constant;
sub del;
sub fd;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub get;
sub length;
sub pop;
sub push;
sub put;
sub seq;
sub shift;
sub sync;
sub unshift;
}
package Data::Dumper {
sub Dumpxs($;$$) ;
sub _vstring($) ;
}
package Devel::Peek {
sub CvGV;
sub DeadCode;
sub Dump;
sub DumpArray;
sub DumpProg;
sub SvREFCNT(\[$@%&*]) ;
sub fill_mstats;
sub mstat;
sub mstats2hash($\%;$) ;
sub mstats_fillhash(\%;$) ;
sub runops_debug;
}
package Digest::MD5 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub context;
sub digest;
sub hexdigest;
sub md5;
sub md5_base64;
sub md5_hex;
sub new;
sub reset;
}
package Digest::SHA {
sub DESTROY($) ;
sub _addfilebin($$) ;
sub _addfileuniv($$) ;
sub _getstate($) ;
sub _putstate($$) ;
sub add($;@) ;
sub algorithm($) ;
sub b64digest($) ;
sub clone($) ;
sub digest($) ;
sub hashsize($) ;
sub hexdigest($) ;
sub hmac_sha1(;@) ;
sub hmac_sha1_base64(;@) ;
sub hmac_sha1_hex(;@) ;
sub hmac_sha224(;@) ;
sub hmac_sha224_base64(;@) ;
sub hmac_sha224_hex(;@) ;
sub hmac_sha256(;@) ;
sub hmac_sha256_base64(;@) ;
sub hmac_sha256_hex(;@) ;
sub hmac_sha384(;@) ;
sub hmac_sha384_base64(;@) ;
sub hmac_sha384_hex(;@) ;
sub hmac_sha512(;@) ;
sub hmac_sha512224(;@) ;
sub hmac_sha512224_base64(;@) ;
sub hmac_sha512224_hex(;@) ;
sub hmac_sha512256(;@) ;
sub hmac_sha512256_base64(;@) ;
sub hmac_sha512256_hex(;@) ;
sub hmac_sha512_base64(;@) ;
sub hmac_sha512_hex(;@) ;
sub newSHA($$) ;
sub sha1(;@) ;
sub sha1_base64(;@) ;
sub sha1_hex(;@) ;
sub sha224(;@) ;
sub sha224_base64(;@) ;
sub sha224_hex(;@) ;
sub sha256(;@) ;
sub sha256_base64(;@) ;
sub sha256_hex(;@) ;
sub sha384(;@) ;
sub sha384_base64(;@) ;
sub sha384_hex(;@) ;
sub sha512(;@) ;
sub sha512224(;@) ;
sub sha512224_base64(;@) ;
sub sha512224_hex(;@) ;
sub sha512256(;@) ;
sub sha512256_base64(;@) ;
sub sha512256_hex(;@) ;
sub sha512_base64(;@) ;
sub sha512_hex(;@) ;
sub shainit($$) ;
sub sharewind($) ;
sub shawrite($$$) ;
}
package Digest::base {
sub add;
sub clone;
sub digest;
sub new;
}
package DynaLoader {
sub CLONE;
sub boot_DynaLoader;
sub dl_error;
sub dl_find_symbol;
sub dl_install_xsub;
sub dl_load_file;
sub dl_undef_symbols;
sub dl_unload_file;
}
package Encode {
sub _utf8_off($) ;
sub _utf8_on($) ;
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub from_to($$$;$) ;
sub is_utf8($;$) ;
sub onBOOT() ;
sub str2bytes($$;$) ;
}
package Encode::Byte {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::CN {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::EBCDIC {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::JP {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::KR {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::Symbol {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::TW {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::Unicode {
sub decode;
sub encode;
}
package Encode::XS {
sub cat_decode;
sub decode;
sub encode;
sub mime_name;
sub name;
sub needs_lines;
sub perlio_ok;
sub renew;
sub renewed;
}
package Encode::utf8 {
sub decode;
sub encode;
}
package Fcntl {
sub AUTOLOAD;
sub FCREAT() ;
sub FDEFER() ;
sub FDSYNC() ;
sub FEXCL() ;
sub FLARGEFILE() ;
sub FRSYNC() ;
sub FSYNC() ;
sub FTRUNC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SHARE() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub O_ALIAS() ;
sub O_ALT_IO() ;
sub O_DEFER() ;
sub O_EVTONLY() ;
sub O_EXLOCK() ;
sub O_IGNORE_CTTY() ;
sub O_NOINHERIT() ;
sub O_NOLINK() ;
sub O_NOSIGPIPE() ;
sub O_NOTRANS() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_SYMLINK() ;
sub O_TEMPORARY() ;
sub O_TTY_INIT() ;
sub S_ENFMT() ;
sub S_IFMT;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub S_ISTXT() ;
}
package File::DosGlob {
sub _callsite;
}
package File::Find {
sub is_tainted($) ;
}
package File::Glob {
sub AUTOLOAD;
sub CLONE;
sub GLOB_ERROR;
sub bsd_glob;
sub bsd_glob_override;
sub csh_glob;
}
package File::Spec::Unix {
sub _fn_canonpath;
sub _fn_catdir;
sub _fn_catfile;
sub canonpath;
sub catdir;
sub catfile;
}
package Filter::Util::Call {
sub filter_del() ;
sub filter_read(;$) ;
sub real_import($$$) ;
sub unimport(;$@) ;
}
package GDBM_File {
sub AUTOLOAD;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub close;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub reorganize;
sub setopt;
sub sync;
}
package Glib {
sub CHECK_VERSION;
sub GET_VERSION_INFO;
sub MAJOR_VERSION;
sub MICRO_VERSION;
sub MINOR_VERSION;
sub critical;
sub error;
sub filename_display_basename;
sub filename_display_name;
sub filename_from_unicode($) ;
sub filename_from_uri($) ;
sub filename_to_unicode($) ;
sub filename_to_uri($$) ;
sub get_application_name;
sub get_home_dir;
sub get_language_names;
sub get_real_name;
sub get_system_config_dirs;
sub get_system_data_dirs;
sub get_tmp_dir;
sub get_user_cache_dir;
sub get_user_config_dir;
sub get_user_data_dir;
sub get_user_name;
sub get_user_special_dir;
sub install_exception_handler;
sub log;
sub main_depth;
sub major_version;
sub message;
sub micro_version;
sub minor_version;
sub remove_exception_handler;
sub set_application_name;
sub strerror;
sub strsignal;
sub warning;
}
package Glib::BookmarkFile {
sub DESTROY;
sub add_application;
sub add_group;
sub get_added;
sub get_app_info;
sub get_applications;
sub get_description;
sub get_groups;
sub get_icon;
sub get_is_private;
sub get_mime_type;
sub get_modified;
sub get_size;
sub get_title;
sub get_uris;
sub get_visited;
sub has_application;
sub has_group;
sub has_item;
sub load_from_data;
sub load_from_data_dirs;
sub load_from_file;
sub move_item;
sub new;
sub remove_application;
sub remove_group;
sub remove_item;
sub set_added;
sub set_app_info;
sub set_description;
sub set_groups;
sub set_icon;
sub set_is_private;
sub set_mime_type;
sub set_modified;
sub set_title;
sub set_visited;
sub to_data;
sub to_file;
}
package Glib::Boxed {
sub DESTROY;
sub copy;
}
package Glib::Bytes {
sub compare;
sub equal;
sub get_data;
sub get_size;
sub hash;
sub new;
}
package Glib::Child {
sub watch_add;
}
package Glib::Error {
sub matches;
sub new;
sub register;
sub throw;
}
package Glib::Flags {
sub all;
sub as_arrayref($;@) ;
sub bool($;@) ;
sub eq;
sub ge;
sub intersect;
sub ne;
sub new;
sub sub;
sub union;
sub xor;
}
package Glib::IO {
sub add_watch;
}
package Glib::Idle {
sub add;
}
package Glib::KeyFile {
sub DESTROY;
sub get_boolean;
sub get_boolean_list;
sub get_comment;
sub get_double;
sub get_double_list;
sub get_groups;
sub get_integer;
sub get_integer_list;
sub get_keys;
sub get_locale_string;
sub get_locale_string_list;
sub get_start_group;
sub get_string;
sub get_string_list;
sub get_value;
sub has_group;
sub has_key;
sub load_from_data;
sub load_from_data_dirs;
sub load_from_dirs;
sub load_from_file;
sub new;
sub remove_comment;
sub remove_group;
sub remove_key;
sub set_boolean;
sub set_boolean_list;
sub set_comment;
sub set_double;
sub set_double_list;
sub set_integer;
sub set_integer_list;
sub set_list_separator;
sub set_locale_string;
sub set_locale_string_list;
sub set_string;
sub set_string_list;
sub set_value;
sub to_data;
}
package Glib::Log {
sub default_handler;
sub remove_handler;
sub set_always_fatal;
sub set_default_handler;
sub set_fatal_mask;
sub set_handler;
}
package Glib::MainContext {
sub DESTROY;
sub default;
sub is_owner;
sub iteration;
sub new;
sub pending;
}
package Glib::MainLoop {
sub DESTROY;
sub get_context;
sub is_running;
sub new;
sub quit;
sub run;
}
package Glib::Markup {
sub escape_text;
}
package Glib::Object {
sub CLONE;
sub DESTROY;
sub find_property;
sub freeze_notify;
sub get;
sub get_data;
sub get_pointer;
sub get_property;
sub list_properties;
sub new;
sub new_from_pointer;
sub notify;
sub set;
sub set_data;
sub set_property;
sub set_threadsafe;
sub signal_add_emission_hook;
sub signal_chain_from_overridden;
sub signal_connect;
sub signal_connect_after;
sub signal_connect_swapped;
sub signal_emit;
sub signal_get_invocation_hint;
sub signal_handler_block;
sub signal_handler_disconnect;
sub signal_handler_is_connected;
sub signal_handler_unblock;
sub signal_handlers_block_by_func;
sub signal_handlers_disconnect_by_func;
sub signal_handlers_unblock_by_func;
sub signal_query;
sub signal_remove_emission_hook;
sub signal_stop_emission_by_name;
sub thaw_notify;
}
package Glib::Object::Introspection {
sub CHECK_VERSION;
sub _add_interface;
sub _construct_boxed;
sub _fetch_constant;
sub _find_non_perl_parents;
sub _find_vfuncs_with_implementation;
sub _get_field;
sub _install_overrides;
sub _invoke_fallback_vfunc;
sub _load_library;
sub _register_boxed_synonym;
sub _register_types;
sub _set_field;
sub _use_generic_signal_marshaller_for;
sub convert_enum_to_sv;
sub convert_flags_to_sv;
sub convert_sv_to_enum;
sub convert_sv_to_flags;
sub invoke;
}
package Glib::Object::Introspection::GValueWrapper {
sub DESTROY;
sub get_value;
sub new;
}
package Glib::Object::Introspection::_FuncWrapper {
sub DESTROY;
sub _invoke;
}
package Glib::Object::_LazyLoader {
sub _load;
}
package Glib::OptionContext {
sub add_group;
sub add_main_entries;
sub get_help_enabled;
sub get_ignore_unknown_options;
sub get_main_group;
sub new;
sub parse;
sub set_help_enabled;
sub set_ignore_unknown_options;
sub set_main_group;
}
package Glib::OptionGroup {
sub new;
sub set_translate_func;
sub set_translation_domain;
}
package Glib::Param::Char {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::Double {
sub get_epsilon;
sub get_maximum;
sub get_minimum;
}
package Glib::Param::Enum {
sub get_enum_class;
}
package Glib::Param::Flags {
sub get_flags_class;
}
package Glib::Param::Float {
sub get_epsilon;
sub get_maximum;
sub get_minimum;
}
package Glib::Param::GType {
sub get_is_a_type;
}
package Glib::Param::Int {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::Int64 {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::Long {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::UChar {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::UInt {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::UInt64 {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::ULong {
sub get_maximum;
sub get_minimum;
}
package Glib::ParamSpec {
sub DESTROY;
sub IV;
sub UV;
sub boolean;
sub boxed;
sub char;
sub double;
sub enum;
sub flags;
sub float;
sub get_blurb;
sub get_default_value;
sub get_flags;
sub get_name;
sub get_nick;
sub get_owner_type;
sub get_redirect_target;
sub get_value_type;
sub gtype;
sub int64;
sub int;
sub long;
sub object;
sub override;
sub param_spec;
sub scalar;
sub string;
sub uchar;
sub uint64;
sub uint;
sub ulong;
sub unichar;
sub value_validate;
sub values_cmp;
}
package Glib::Source {
sub remove;
}
package Glib::Timeout {
sub add;
sub add_seconds;
}
package Glib::Type {
sub list_ancestors;
sub list_interfaces;
sub list_signals;
sub list_values;
sub package_from_cname;
sub register;
sub register_enum;
sub register_flags;
sub register_object;
}
package Glib::Variant {
sub DESTROY;
sub byteswap;
sub classify;
sub compare;
sub equal;
sub get_boolean;
sub get_byte;
sub get_bytestring;
sub get_child_value;
sub get_double;
sub get_handle;
sub get_int16;
sub get_int32;
sub get_int64;
sub get_maybe;
sub get_normal_form;
sub get_size;
sub get_string;
sub get_type;
sub get_type_string;
sub get_uint16;
sub get_uint32;
sub get_uint64;
sub get_variant;
sub hash;
sub is_container;
sub is_normal_form;
sub is_object_path;
sub is_of_type;
sub is_signature;
sub lookup_value;
sub n_children;
sub new_array;
sub new_boolean;
sub new_byte;
sub new_bytestring;
sub new_dict_entry;
sub new_double;
sub new_handle;
sub new_int16;
sub new_int32;
sub new_int64;
sub new_maybe;
sub new_object_path;
sub new_signature;
sub new_string;
sub new_tuple;
sub new_uint16;
sub new_uint32;
sub new_uint64;
sub new_variant;
sub parse;
sub print;
}
package Glib::VariantDict {
sub contains;
sub end;
sub insert_value;
sub lookup_value;
sub new;
sub remove;
}
package Glib::VariantType {
sub element;
sub equal;
sub first;
sub get_string;
sub hash;
sub is_array;
sub is_basic;
sub is_container;
sub is_definite;
sub is_dict_entry;
sub is_maybe;
sub is_subtype_of;
sub is_tuple;
sub is_variant;
sub key;
sub n_items;
sub new;
sub new_array;
sub new_dict_entry;
sub new_maybe;
sub new_tuple;
sub next;
sub string_is_valid;
sub string_scan;
sub value;
}
package HTML::Entities {
sub UNICODE_SUPPORT() ;
sub _decode_entities;
sub _probably_utf8_chunk;
sub decode;
sub decode_entities;
}
package HTML::Parser {
sub _alloc_pstate;
sub attr_encoded;
sub backquote;
sub boolean_attribute_value;
sub case_sensitive;
sub closing_plaintext;
sub empty_element_tags;
sub eof;
sub handler;
sub ignore_elements;
sub ignore_tags;
sub marked_sections;
sub parse;
sub report_tags;
sub strict_comment;
sub strict_end;
sub strict_names;
sub unbroken_text;
sub utf8_mode;
sub xml_mode;
sub xml_pic;
}
package Hash::Util {
sub _clear_placeholders(\%) ;
sub all_keys(\%\@\@) ;
sub bucket_array;
sub bucket_info;
sub bucket_ratio(\%) ;
sub hash_seed() ;
sub hash_traversal_mask;
sub hash_value($;$) ;
sub hidden_ref_keys;
sub hv_store(\%$$) ;
sub legal_ref_keys;
sub num_buckets(\%) ;
sub reftype($) ;
sub used_buckets(\%) ;
}
package Hash::Util::FieldHash {
sub CLONE;
sub _active_fields;
sub _fieldhash($$) ;
sub _test_uvar_get;
sub _test_uvar_same;
sub _test_uvar_set;
sub id($) ;
sub id_2obj($) ;
sub reftype($) ;
sub register($@) ;
}
package I18N::Langinfo {
sub AUTOLOAD;
sub langinfo(_) ;
}
package IO::File {
sub new_tmpfile;
}
package IO::Handle {
sub _create_getline_subs;
sub blocking($;$) ;
sub clearerr;
sub error;
sub flush;
sub setbuf;
sub setvbuf;
sub sync;
sub ungetc;
sub untaint;
}
package IO::Poll {
sub _poll;
}
package IO::Seekable {
sub getpos;
sub setpos;
}
package IO::Socket {
sub sockatmark($) ;
}
package IPC::Msg::stat {
sub pack($) ;
sub unpack($$) ;
}
package IPC::Semaphore::stat {
sub pack($) ;
sub unpack($$) ;
}
package IPC::SharedMem::stat {
sub pack($) ;
sub unpack($$) ;
}
package IPC::SysV {
sub _constant($) ;
sub ftok($;$) ;
sub memread($$$$) ;
sub memwrite($$$$) ;
sub shmat($$$) ;
sub shmdt($) ;
}
package Image::Magick::Q16HDRI {
sub AcquireImagePixels($;@) ;
sub AdaptiveBlur($;@) ;
sub AdaptiveBlurImage($;@) ;
sub AdaptiveResize($;@) ;
sub AdaptiveResizeImage($;@) ;
sub AdaptiveSharpen($;@) ;
sub AdaptiveSharpenImage($;@) ;
sub AdaptiveThreshold($;@) ;
sub AdaptiveThresholdImage($;@) ;
sub AddNoise($;@) ;
sub AddNoiseImage($;@) ;
sub AffineTransform($;@) ;
sub AffineTransformImage($;@) ;
sub Animate($;@) ;
sub AnimateImage($;@) ;
sub Annotate($;@) ;
sub AnnotateImage($;@) ;
sub Append($;@) ;
sub AppendImage($;@) ;
sub AutoGamma($;@) ;
sub AutoGammaImage($;@) ;
sub AutoLevel($;@) ;
sub AutoLevelImage($;@) ;
sub AutoOrient($;@) ;
sub AutoOrientImage($;@) ;
sub AutoThreshold($;@) ;
sub AutoThresholdImage($;@) ;
sub Average($) ;
sub AverageImage($) ;
sub BlackThreshold($;@) ;
sub BlackThresholdImage($;@) ;
sub BlobToImage($;@) ;
sub BlueShift($;@) ;
sub BlueShiftImage($;@) ;
sub Blur($;@) ;
sub BlurImage($;@) ;
sub Border($;@) ;
sub BorderImage($;@) ;
sub BrightnessContrast($;@) ;
sub BrightnessContrastImage($;@) ;
sub CLAHE($;@) ;
sub CLAHEImage($;@) ;
sub CLONE($;@) ;
sub CannyEdge($;@) ;
sub CannyEdgeImage($;@) ;
sub Channel($;@) ;
sub ChannelFx($;@) ;
sub ChannelFxImage($;@) ;
sub ChannelImage($;@) ;
sub Charcoal($;@) ;
sub CharcoalImage($;@) ;
sub Chop($;@) ;
sub ChopImage($;@) ;
sub Clamp($;@) ;
sub ClampImage($;@) ;
sub Clip($;@) ;
sub ClipImage($;@) ;
sub ClipMask($;@) ;
sub ClipMaskImage($;@) ;
sub Clone($) ;
sub CloneImage($) ;
sub Clut($;@) ;
sub ClutImage($;@) ;
sub Coalesce($) ;
sub CoalesceImage($) ;
sub Color($;@) ;
sub ColorDecisionList($;@) ;
sub ColorDecisionListImage($;@) ;
sub ColorFloodfill($;@) ;
sub ColorFloodfillImage($;@) ;
sub ColorImage($;@) ;
sub ColorMatrix($;@) ;
sub ColorMatrixImage($;@) ;
sub Colorize($;@) ;
sub ColorizeImage($;@) ;
sub Colorspace($;@) ;
sub ColorspaceImage($;@) ;
sub Comment($;@) ;
sub CommentImage($;@) ;
sub Compare($;@) ;
sub CompareImages($;@) ;
sub CompareImagesLayers($;@) ;
sub CompareLayers($;@) ;
sub ComplexImages($;@) ;
sub Composite($;@) ;
sub CompositeImage($;@) ;
sub ConnectedComponents($;@) ;
sub ConnectedComponentsImage($;@) ;
sub Contrast($;@) ;
sub ContrastImage($;@) ;
sub ContrastStretch($;@) ;
sub ContrastStretchImage($;@) ;
sub Convolve($;@) ;
sub ConvolveImage($;@) ;
sub CopyImage($) ;
sub CopyImagePixels($;@) ;
sub CopyPixels($;@) ;
sub Crop($;@) ;
sub CropImage($;@) ;
sub CycleColormap($;@) ;
sub CycleColormapImage($;@) ;
sub DESTROY($) ;
sub Decipher($;@) ;
sub DecipherImage($;@) ;
sub Deconstruct($;@) ;
sub DeconstructImage($;@) ;
sub Describe($;@) ;
sub DescribeImage($;@) ;
sub Deskew($;@) ;
sub DeskewImage($;@) ;
sub Despeckle($;@) ;
sub DespeckleImage($;@) ;
sub Difference($;@) ;
sub DifferenceImage($;@) ;
sub Display($;@) ;
sub DisplayImage($;@) ;
sub Distort($;@) ;
sub DistortImage($;@) ;
sub Draw($;@) ;
sub DrawImage($;@) ;
sub Edge($;@) ;
sub EdgeImage($;@) ;
sub Emboss($;@) ;
sub EmbossImage($;@) ;
sub Encipher($;@) ;
sub EncipherImage($;@) ;
sub Enhance($;@) ;
sub EnhanceImage($;@) ;
sub Equalize($;@) ;
sub EqualizeImage($;@) ;
sub Evaluate($;@) ;
sub EvaluateImage($;@) ;
sub EvaluateImages($;@) ;
sub Extent($;@) ;
sub ExtentImage($;@) ;
sub Features($;@) ;
sub FeaturesImage($;@) ;
sub Flatten($;@) ;
sub FlattenImage($;@) ;
sub Flip($;@) ;
sub FlipImage($;@) ;
sub FloodfillPaint($;@) ;
sub FloodfillPaintImage($;@) ;
sub Flop($;@) ;
sub FlopImage($;@) ;
sub ForwardFourierTransform($;@) ;
sub ForwardFourierTransformImage($;@) ;
sub Frame($;@) ;
sub FrameImage($;@) ;
sub Function($;@) ;
sub FunctionImage($;@) ;
sub Fx($;@) ;
sub FxImage($;@) ;
sub Gamma($;@) ;
sub GammaImage($;@) ;
sub GaussianBlur($;@) ;
sub GaussianBlurImage($;@) ;
sub Get($;@) ;
sub GetAttribute($;@) ;
sub GetAttributes($;@) ;
sub GetAuthenticMetacontent($;@) ;
sub GetAuthenticPixels($;@) ;
sub GetImagePixels($;@) ;
sub GetMetacontent($;@) ;
sub GetPixel($;@) ;
sub GetPixels($;@) ;
sub GetVirtualMetacontent($;@) ;
sub GetVirtualPixels($;@) ;
sub Grayscale($;@) ;
sub GrayscaleImage($;@) ;
sub HaldClut($;@) ;
sub HaldClutImage($;@) ;
sub Histogram($;@) ;
sub HistogramImage($;@) ;
sub HoughLine($;@) ;
sub HoughLineImage($;@) ;
sub Identify($;@) ;
sub IdentifyImage($;@) ;
sub ImageToBlob($;@) ;
sub Implode($;@) ;
sub ImplodeImage($;@) ;
sub InverseFourierTransform($;@) ;
sub InverseFourierTransformImage($;@) ;
sub Kuwahara($;@) ;
sub KuwaharaImage($;@) ;
sub Label($;@) ;
sub LabelImage($;@) ;
sub Layers($;@) ;
sub Level($;@) ;
sub LevelColors($;@) ;
sub LevelImage($;@) ;
sub LevelImageColors($;@) ;
sub LinearStretch($;@) ;
sub LinearStretchImage($;@) ;
sub LiquidRescale($;@) ;
sub LiquidRescaleImage($;@) ;
sub MagickToMime($$) ;
sub Magnify($;@) ;
sub MagnifyImage($;@) ;
sub Map($;@) ;
sub MapImage($;@) ;
sub Mask($;@) ;
sub MaskImage($;@) ;
sub MatteFloodfill($;@) ;
sub MatteFloodfillImage($;@) ;
sub MeanShift($;@) ;
sub MeanShiftImage($;@) ;
sub MedianConvolveImage($;@) ;
sub MedianFilter($;@) ;
sub Minify($;@) ;
sub MinifyImage($;@) ;
sub Mode($;@) ;
sub ModeImage($;@) ;
sub Modulate($;@) ;
sub ModulateImage($;@) ;
sub Mogrify($;@) ;
sub MogrifyRegion($;@) ;
sub Montage($;@) ;
sub MontageImage($;@) ;
sub Morph($;@) ;
sub MorphImage($;@) ;
sub Morphology($;@) ;
sub MorphologyImage($;@) ;
sub Mosaic($) ;
sub MosaicImage($) ;
sub MotionBlur($;@) ;
sub MotionBlurImage($;@) ;
sub Negate($;@) ;
sub NegateImage($;@) ;
sub Normalize($;@) ;
sub NormalizeImage($;@) ;
sub NumberColors($;@) ;
sub NumberColorsImage($;@) ;
sub OilPaint($;@) ;
sub OilPaintImage($;@) ;
sub Opaque($;@) ;
sub OpaqueImage($;@) ;
sub OptimizeImageLayers($;@) ;
sub OrderedDither($;@) ;
sub OrderedDitherImage($;@) ;
sub Perceptible($;@) ;
sub PerceptibleImage($;@) ;
sub PerceptualHash($) ;
sub PerceptualHashImage($) ;
sub Ping($;@) ;
sub PingImage($;@) ;
sub Polaroid($;@) ;
sub PolaroidImage($;@) ;
sub Poly($;@) ;
sub PolyImage($;@) ;
sub Posterize($;@) ;
sub PosterizeImage($;@) ;
sub Preview($;@) ;
sub PreviewImage($;@) ;
sub Profile($;@) ;
sub ProfileImage($;@) ;
sub Quantize($;@) ;
sub QuantizeImage($;@) ;
sub QueryColor($;@) ;
sub QueryColorname($;@) ;
sub QueryFont($;@) ;
sub QueryFontMetrics($;@) ;
sub QueryFormat($;@) ;
sub QueryMultilineFontMetrics($;@) ;
sub QueryOption($;@) ;
sub Raise($;@) ;
sub RaiseImage($;@) ;
sub RangeThreshold($;@) ;
sub RangeThresholdImage($;@) ;
sub Read($;@) ;
sub ReadImage($;@) ;
sub ReduceNoise($;@) ;
sub ReduceNoiseImage($;@) ;
sub Remap($;@) ;
sub RemapImage($;@) ;
sub Remote($;@) ;
sub RemoteCommand($;@) ;
sub Resample($;@) ;
sub ResampleImage($;@) ;
sub Resize($;@) ;
sub ResizeImage($;@) ;
sub Roll($;@) ;
sub RollImage($;@) ;
sub Rotate($;@) ;
sub RotateImage($;@) ;
sub RotationalBlur($;@) ;
sub RotationalBlurImage($;@) ;
sub Sample($;@) ;
sub SampleImage($;@) ;
sub Sans0($;@) ;
sub Sans0Image($;@) ;
sub Sans1($;@) ;
sub Sans1Image($;@) ;
sub Scale($;@) ;
sub ScaleImage($;@) ;
sub Segment($;@) ;
sub SegmentImage($;@) ;
sub SelectiveBlur($;@) ;
sub SelectiveBlurImage($;@) ;
sub Separate($;@) ;
sub SeparateImage($;@) ;
sub SepiaTone($;@) ;
sub SepiaToneImage($;@) ;
sub Set($;@) ;
sub SetAttribute($;@) ;
sub SetAttributes($;@) ;
sub SetPixel($;@) ;
sub SetPixels($;@) ;
sub Shade($;@) ;
sub ShadeImage($;@) ;
sub Shadow($;@) ;
sub ShadowImage($;@) ;
sub Sharpen($;@) ;
sub SharpenImage($;@) ;
sub Shave($;@) ;
sub ShaveImage($;@) ;
sub Shear($;@) ;
sub ShearImage($;@) ;
sub SigmoidalContrast($;@) ;
sub SigmoidalContrastImage($;@) ;
sub Signature($;@) ;
sub SignatureImage($;@) ;
sub Sketch($;@) ;
sub SketchImage($;@) ;
sub Smush($;@) ;
sub SmushImage($;@) ;
sub Solarize($;@) ;
sub SolarizeImage($;@) ;
sub SparseColor($;@) ;
sub SparseColorImage($;@) ;
sub Splice($;@) ;
sub SpliceImage($;@) ;
sub Spread($;@) ;
sub SpreadImage($;@) ;
sub Statistic($;@) ;
sub StatisticImage($;@) ;
sub Statistics($) ;
sub StatisticsImage($) ;
sub Stegano($;@) ;
sub SteganoImage($;@) ;
sub Stereo($;@) ;
sub StereoImage($;@) ;
sub Strip($;@) ;
sub StripImage($;@) ;
sub Swirl($;@) ;
sub SwirlImage($;@) ;
sub Sync($;@) ;
sub SyncAuthenticPixels($;@) ;
sub SyncImage($;@) ;
sub SyncImagePixels($;@) ;
sub Syncauthenticpixels($;@) ;
sub Texture($;@) ;
sub TextureImage($;@) ;
sub Threshold($;@) ;
sub ThresholdImage($;@) ;
sub Thumbnail($;@) ;
sub ThumbnailImage($;@) ;
sub Tint($;@) ;
sub TintImage($;@) ;
sub Transparent($;@) ;
sub TransparentImage($;@) ;
sub Transpose($;@) ;
sub TransposeImage($;@) ;
sub Transverse($;@) ;
sub TransverseImage($;@) ;
sub Trim($;@) ;
sub TrimImage($;@) ;
sub UNLOAD() ;
sub UniqueColors($;@) ;
sub UniqueColorsImage($;@) ;
sub UnsharpMask($;@) ;
sub UnsharpMaskImage($;@) ;
sub Vignette($;@) ;
sub VignetteImage($;@) ;
sub Wave($;@) ;
sub WaveImage($;@) ;
sub WaveletDenoise($;@) ;
sub WaveletDenoiseImage($;@) ;
sub WhiteThreshold($;@) ;
sub WhiteThresholdImage($;@) ;
sub Write($;@) ;
sub WriteImage($;@) ;
sub Zoom($;@) ;
sub ZoomImage($;@) ;
sub acquireimagepixels($;@) ;
sub animate($;@) ;
sub animateimage($;@) ;
sub append($;@) ;
sub appendimage($;@) ;
sub average($) ;
sub averageimage($) ;
sub blob($;@) ;
sub blobto($;@) ;
sub blobtoimage($;@) ;
sub channelfx($;@) ;
sub channelfximage($;@) ;
sub clone($) ;
sub cloneimage($) ;
sub coalesce($) ;
sub coalesceimage($) ;
sub compare($;@) ;
sub compareimage($;@) ;
sub compareimagelayers($;@) ;
sub comparelayers($;@) ;
sub compleximages($;@) ;
sub constant($$) ;
sub copy($) ;
sub copyimage($) ;
sub display($;@) ;
sub displayimage($;@) ;
sub evaluateimages($;@) ;
sub features($;@) ;
sub featuresimage($;@) ;
sub flatten($;@) ;
sub flattenimage($;@) ;
sub fx($;@) ;
sub fximage($;@) ;
sub get($;@) ;
sub getPixel($;@) ;
sub getPixels($;@) ;
sub getattribute($;@) ;
sub getattributes($;@) ;
sub getauthenticmetacontent($;@) ;
sub getauthenticpixels($;@) ;
sub getimagepixels($;@) ;
sub getmetacontent($;@) ;
sub getpixel($;@) ;
sub getpixels($;@) ;
sub getvirtualmetacontent($;@) ;
sub getvirtualpixels($;@) ;
sub histogram($;@) ;
sub histogramimage($;@) ;
sub imagetoblob($;@) ;
sub layers($;@) ;
sub magicktomime($$) ;
sub montage($;@) ;
sub montageimage($;@) ;
sub morph($;@) ;
sub morphimage($;@) ;
sub mosaic($) ;
sub mosaicimage($) ;
sub optimizeimagelayers($;@) ;
sub optimizelayers($;@) ;
sub perceptualhash($) ;
sub perceptualhashimage($) ;
sub ping($;@) ;
sub pingimage($;@) ;
sub preview($;@) ;
sub previewimage($;@) ;
sub querycolor($;@) ;
sub querycolorname($;@) ;
sub queryfont($;@) ;
sub queryfontmetrics($;@) ;
sub queryformat($;@) ;
sub querymultilinefontmetrics($;@) ;
sub queryoption($;@) ;
sub read($;@) ;
sub readimage($;@) ;
sub remote($;@) ;
sub remoteCommand($;@) ;
sub set($;@) ;
sub setPixel($;@) ;
sub setPixels($;@) ;
sub setattribute($;@) ;
sub setattributes($;@) ;
sub setpixel($;@) ;
sub setpixels($;@) ;
sub smush($;@) ;
sub smushimage($;@) ;
sub statistics($) ;
sub statisticsimage($) ;
sub syncimagepixels($;@) ;
sub toblob($;@) ;
sub write($;@) ;
sub writeimage($;@) ;
}
package Internals {
sub SvREADONLY(\[$%@];$) ;
sub SvREFCNT(\[$%@];$) ;
sub V;
sub getcwd() ;
sub hv_clear_placeholders(\%) ;
}
package List::Util {
sub all(&@) ;
sub any(&@) ;
sub first(&@) ;
sub head($@) ;
sub max(@) ;
sub maxstr(@) ;
sub min(@) ;
sub minstr(@) ;
sub none(&@) ;
sub notall(&@) ;
sub pairfirst(&@) ;
sub pairgrep(&@) ;
sub pairkeys(@) ;
sub pairmap(&@) ;
sub pairs(@) ;
sub pairvalues(@) ;
sub product(@) ;
sub reduce(&@) ;
sub shuffle(@) ;
sub sum(@) ;
sub sum0(@) ;
sub tail($@) ;
sub uniq(@) ;
sub uniqnum(@) ;
sub uniqstr(@) ;
sub unpairs(@) ;
}
package Locale::gettext {
sub bind_textdomain_codeset;
sub bindtextdomain;
sub bytes2str($$;$) ;
sub constant;
sub dcgettext;
sub dcngettext;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub dgettext;
sub dngettext;
sub encode($$;$) ;
sub encode_utf8($) ;
sub gettext;
sub localeconv;
sub ngettext;
sub setlocale;
sub str2bytes($$;$) ;
sub textdomain;
}
package MIME::Base64 {
sub decode($) ;
sub decode_base64($) ;
sub decoded_base64_length($) ;
sub encode($;$) ;
sub encode_base64($;$) ;
sub encoded_base64_length($;$) ;
}
package MIME::QuotedPrint {
sub decode_qp($) ;
sub encode_qp($;$$) ;
}
package Math::BigInt::FastCalc {
sub __strip_zeros;
sub _acmp;
sub _copy;
sub _dec;
sub _inc;
sub _is_even;
sub _is_odd;
sub _is_one;
sub _is_ten;
sub _is_two;
sub _is_zero;
sub _len;
sub _new;
sub _one;
sub _ten;
sub _two;
sub _zero;
}
package NDBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub clearerr;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Net::Libproxy {
sub proxy_factory_get_proxies;
sub proxy_factory_new;
}
package Net::Libproxy::ProxyFactoryPtr {
sub DESTROY;
}
package Net::SSLeay {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CCITT() ;
sub AF_CHAOS() ;
sub AF_CTF() ;
sub AF_DATAKIT() ;
sub AF_DLI() ;
sub AF_ECMA() ;
sub AF_GOSIP() ;
sub AF_HYLINK() ;
sub AF_IMPLINK() ;
sub AF_ISO() ;
sub AF_LAST() ;
sub AF_LAT() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_NS() ;
sub AF_OSI() ;
sub AF_OSINET() ;
sub AF_PUP() ;
sub AF_USER() ;
sub AF_WAN() ;
sub ASN1_INTEGER_free($) ;
sub ASN1_INTEGER_get($) ;
sub ASN1_INTEGER_new() ;
sub ASN1_INTEGER_set($$) ;
sub ASN1_TIME_free($) ;
sub ASN1_TIME_new() ;
sub ASN1_TIME_set($$) ;
sub ASN1_TIME_timet($) ;
sub BIO_eof($) ;
sub BIO_f_ssl() ;
sub BIO_free($) ;
sub BIO_new($) ;
sub BIO_new_buffer_ssl_connect($) ;
sub BIO_new_file($$) ;
sub BIO_new_ssl($$) ;
sub BIO_new_ssl_connect($) ;
sub BIO_pending($) ;
sub BIO_read($;$) ;
sub BIO_s_mem() ;
sub BIO_ssl_copy_session_id($$) ;
sub BIO_ssl_shutdown($) ;
sub BIO_wpending($) ;
sub BIO_write($$) ;
sub CIPHER_description($$$) ;
sub CIPHER_get_bits($;$) ;
sub CIPHER_get_name($) ;
sub CLONE(;@) ;
sub COMP_add_compression_method($$) ;
sub CTX_add_client_CA($$) ;
sub CTX_add_extra_chain_cert($$) ;
sub CTX_add_session($$) ;
sub CTX_callback_ctrl($$$) ;
sub CTX_check_private_key($) ;
sub CTX_ctrl($$$$) ;
sub CTX_flush_sessions($$) ;
sub CTX_free($) ;
sub CTX_get0_param($) ;
sub CTX_get_app_data($) ;
sub CTX_get_cert_store($) ;
sub CTX_get_client_CA_list($) ;
sub CTX_get_ex_data($$) ;
sub CTX_get_ex_new_index($;$$$$) ;
sub CTX_get_max_proto_version($) ;
sub CTX_get_min_proto_version($) ;
sub CTX_get_mode($) ;
sub CTX_get_options($) ;
sub CTX_get_quiet_shutdown($) ;
sub CTX_get_read_ahead($) ;
sub CTX_get_session_cache_mode($) ;
sub CTX_get_timeout($) ;
sub CTX_get_verify_depth($) ;
sub CTX_get_verify_mode($) ;
sub CTX_load_verify_locations($$$) ;
sub CTX_new() ;
sub CTX_new_with_method($) ;
sub CTX_remove_session($$) ;
sub CTX_sess_accept($) ;
sub CTX_sess_accept_good($) ;
sub CTX_sess_accept_renegotiate($) ;
sub CTX_sess_cache_full($) ;
sub CTX_sess_cb_hits($) ;
sub CTX_sess_connect($) ;
sub CTX_sess_connect_good($) ;
sub CTX_sess_connect_renegotiate($) ;
sub CTX_sess_get_cache_size($) ;
sub CTX_sess_hits($) ;
sub CTX_sess_misses($) ;
sub CTX_sess_number($) ;
sub CTX_sess_set_cache_size($$) ;
sub CTX_sess_timeouts($) ;
sub CTX_sessions($) ;
sub CTX_set1_param($$) ;
sub CTX_set_alpn_protos($;$) ;
sub CTX_set_alpn_select_cb($$;$) ;
sub CTX_set_app_data($$) ;
sub CTX_set_cert_store($$) ;
sub CTX_set_cert_verify_callback($$;$) ;
sub CTX_set_cipher_list($$) ;
sub CTX_set_client_CA_list($$) ;
sub CTX_set_default_passwd_cb($;$) ;
sub CTX_set_default_passwd_cb_userdata($;$) ;
sub CTX_set_default_verify_paths($) ;
sub CTX_set_ex_data($$$) ;
sub CTX_set_info_callback($$;$) ;
sub CTX_set_max_proto_version($$) ;
sub CTX_set_min_proto_version($$) ;
sub CTX_set_mode($$) ;
sub CTX_set_next_proto_select_cb($$;$) ;
sub CTX_set_next_protos_advertised_cb($$;$) ;
sub CTX_set_options($$) ;
sub CTX_set_psk_client_callback($;$) ;
sub CTX_set_purpose($$) ;
sub CTX_set_quiet_shutdown($$) ;
sub CTX_set_read_ahead($$) ;
sub CTX_set_session_cache_mode($$) ;
sub CTX_set_session_id_context($$$) ;
sub CTX_set_ssl_version($$) ;
sub CTX_set_timeout($$) ;
sub CTX_set_tlsext_servername_callback($;$$) ;
sub CTX_set_tlsext_status_cb($$;$) ;
sub CTX_set_tlsext_ticket_getkey_cb($;$$) ;
sub CTX_set_tmp_dh($$) ;
sub CTX_set_tmp_dh_callback($$) ;
sub CTX_set_tmp_ecdh($$) ;
sub CTX_set_trust($$) ;
sub CTX_set_verify($$;$) ;
sub CTX_set_verify_depth($$) ;
sub CTX_tlsv1_1_new() ;
sub CTX_tlsv1_2_new() ;
sub CTX_tlsv1_new() ;
sub CTX_use_PKCS12_file($$;$) ;
sub CTX_use_PrivateKey($$) ;
sub CTX_use_PrivateKey_file($$$) ;
sub CTX_use_RSAPrivateKey($$) ;
sub CTX_use_RSAPrivateKey_file($$$) ;
sub CTX_use_certificate($$) ;
sub CTX_use_certificate_chain_file($$) ;
sub CTX_use_certificate_file($$$) ;
sub CTX_v23_new() ;
sub DH_free($) ;
sub EC_KEY_free($) ;
sub EC_KEY_generate_key($) ;
sub EC_KEY_new_by_curve_name($) ;
sub ENGINE_by_id($) ;
sub ENGINE_load_builtin_engines() ;
sub ENGINE_register_all_complete() ;
sub ENGINE_set_default($$) ;
sub ERR_clear_error() ;
sub ERR_error_string($;$) ;
sub ERR_get_error() ;
sub ERR_load_RAND_strings() ;
sub ERR_load_SSL_strings() ;
sub ERR_load_crypto_strings() ;
sub ERR_peek_error() ;
sub ERR_put_error($$$$$) ;
sub EVP_Digest(;@) ;
sub EVP_DigestFinal($) ;
sub EVP_DigestFinal_ex($) ;
sub EVP_DigestInit($$) ;
sub EVP_DigestInit_ex($$$) ;
sub EVP_DigestUpdate($$) ;
sub EVP_MD_CTX_create() ;
sub EVP_MD_CTX_destroy($) ;
sub EVP_MD_CTX_md($) ;
sub EVP_MD_size($) ;
sub EVP_MD_type($) ;
sub EVP_PKEY_assign_EC_KEY($$) ;
sub EVP_PKEY_assign_RSA($$) ;
sub EVP_PKEY_bits($) ;
sub EVP_PKEY_copy_parameters($$) ;
sub EVP_PKEY_free($) ;
sub EVP_PKEY_id($) ;
sub EVP_PKEY_new() ;
sub EVP_PKEY_size($) ;
sub EVP_add_digest($) ;
sub EVP_get_cipherbyname($) ;
sub EVP_get_digestbyname($) ;
sub EVP_sha1() ;
sub EVP_sha256() ;
sub EVP_sha512() ;
sub FIPS_mode_set($) ;
sub MD4($) ;
sub MD5($) ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_EOF() ;
sub MSG_ETAG() ;
sub MSG_MAXIOVLEN() ;
sub MSG_MCAST() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub OBJ_cmp($$) ;
sub OBJ_dup($) ;
sub OBJ_ln2nid($) ;
sub OBJ_nid2ln($) ;
sub OBJ_nid2obj($) ;
sub OBJ_nid2sn($) ;
sub OBJ_obj2nid($) ;
sub OBJ_obj2txt($;$) ;
sub OBJ_sn2nid($) ;
sub OBJ_txt2nid($) ;
sub OBJ_txt2obj($;$) ;
sub OCSP_REQUEST_free($) ;
sub OCSP_RESPONSE_free($) ;
sub OCSP_cert2ids($;@) ;
sub OCSP_ids2req(;@) ;
sub OCSP_response_results($;@) ;
sub OCSP_response_status($) ;
sub OCSP_response_status_str($) ;
sub OCSP_response_verify($$;$$) ;
sub OPENSSL_add_all_algorithms_conf() ;
sub OPENSSL_add_all_algorithms_noconf() ;
sub OpenSSL_add_all_algorithms() ;
sub OpenSSL_add_all_digests() ;
sub OpenSSL_add_ssl_algorithms() ;
sub OpenSSL_version(;$) ;
sub OpenSSL_version_num() ;
sub PEM_get_string_PrivateKey($;$$) ;
sub PEM_get_string_X509($) ;
sub PEM_get_string_X509_CRL($) ;
sub PEM_get_string_X509_REQ($) ;
sub PEM_read_bio_DHparams($;$$$) ;
sub PEM_read_bio_PrivateKey($;$$) ;
sub PEM_read_bio_X509($;$$$) ;
sub PEM_read_bio_X509_CRL($;$$$) ;
sub PEM_read_bio_X509_REQ($;$$$) ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CCITT() ;
sub PF_CHAOS() ;
sub PF_CTF() ;
sub PF_DATAKIT() ;
sub PF_DLI() ;
sub PF_ECMA() ;
sub PF_GOSIP() ;
sub PF_HYLINK() ;
sub PF_IMPLINK() ;
sub PF_ISO() ;
sub PF_LAST() ;
sub PF_LAT() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_NS() ;
sub PF_OSI() ;
sub PF_OSINET() ;
sub PF_PUP() ;
sub PF_USER() ;
sub PF_WAN() ;
sub P_ASN1_INTEGER_get_dec($) ;
sub P_ASN1_INTEGER_get_hex($) ;
sub P_ASN1_INTEGER_set_dec($$) ;
sub P_ASN1_INTEGER_set_hex($$) ;
sub P_ASN1_STRING_get($;$) ;
sub P_ASN1_TIME_get_isotime($) ;
sub P_ASN1_TIME_put2string($) ;
sub P_ASN1_TIME_set_isotime($$) ;
sub P_ASN1_UTCTIME_put2string($) ;
sub P_EVP_MD_list_all() ;
sub P_PKCS12_load_file($;$$) ;
sub P_X509_CRL_add_revoked_serial_hex($$$;$$) ;
sub P_X509_CRL_get_serial($) ;
sub P_X509_CRL_set_serial($$) ;
sub P_X509_REQ_add_extensions($;@) ;
sub P_X509_REQ_get_attr($$) ;
sub P_X509_add_extensions($$;@) ;
sub P_X509_copy_extensions($$;$) ;
sub P_X509_get_crl_distribution_points($) ;
sub P_X509_get_ext_key_usage($;$) ;
sub P_X509_get_key_usage($) ;
sub P_X509_get_netscape_cert_type($) ;
sub P_X509_get_ocsp_uri($) ;
sub P_X509_get_pubkey_alg($) ;
sub P_X509_get_signature_alg($) ;
sub P_alpn_selected($) ;
sub P_next_proto_last_status($) ;
sub P_next_proto_negotiated($) ;
sub RAND_add($$$) ;
sub RAND_bytes($$) ;
sub RAND_cleanup() ;
sub RAND_file_name($) ;
sub RAND_load_file($$) ;
sub RAND_poll() ;
sub RAND_pseudo_bytes($$) ;
sub RAND_seed($) ;
sub RAND_status() ;
sub RAND_write_file($) ;
sub RIPEMD160($) ;
sub RSA_free($) ;
sub RSA_generate_key($$;$$) ;
sub SCM_CONNECT() ;
sub SCM_CREDS() ;
sub SESSION_free($) ;
sub SESSION_get_app_data($) ;
sub SESSION_get_ex_data($$) ;
sub SESSION_get_ex_new_index($;$$$$) ;
sub SESSION_get_master_key($) ;
sub SESSION_get_time($) ;
sub SESSION_get_timeout($) ;
sub SESSION_new() ;
sub SESSION_print($$) ;
sub SESSION_print_fp($$) ;
sub SESSION_set_app_data($$) ;
sub SESSION_set_ex_data($$$) ;
sub SESSION_set_time($$) ;
sub SESSION_set_timeout($$) ;
sub SHA1($) ;
sub SHA256($) ;
sub SHA512($) ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DONTLINGER() ;
sub SO_FAMILY() ;
sub SO_PASSIFNAME() ;
sub SO_PROTOTYPE() ;
sub SO_STATE() ;
sub SO_USELOOPBACK() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub SSL_get0_session($) ;
sub SSLeay() ;
sub SSLeay_add_ssl_algorithms() ;
sub SSLeay_version(;$) ;
sub SSLv23_client_method() ;
sub SSLv23_method() ;
sub SSLv23_server_method() ;
sub TLS_client_method() ;
sub TLS_method() ;
sub TLS_server_method() ;
sub TLSv1_1_client_method() ;
sub TLSv1_1_method() ;
sub TLSv1_1_server_method() ;
sub TLSv1_2_client_method() ;
sub TLSv1_2_method() ;
sub TLSv1_2_server_method() ;
sub TLSv1_client_method() ;
sub TLSv1_method() ;
sub TLSv1_server_method() ;
sub X509V3_EXT_d2i($) ;
sub X509V3_EXT_print($;$$) ;
sub X509_CRL_digest($$) ;
sub X509_CRL_free($) ;
sub X509_CRL_get_ext($$) ;
sub X509_CRL_get_ext_by_NID($$;$) ;
sub X509_CRL_get_ext_count($) ;
sub X509_CRL_get_issuer($) ;
sub X509_CRL_get_lastUpdate($) ;
sub X509_CRL_get_nextUpdate($) ;
sub X509_CRL_get_version($) ;
sub X509_CRL_new() ;
sub X509_CRL_set_issuer_name($$) ;
sub X509_CRL_set_lastUpdate($$) ;
sub X509_CRL_set_nextUpdate($$) ;
sub X509_CRL_set_version($$) ;
sub X509_CRL_sign($$$) ;
sub X509_CRL_sort($) ;
sub X509_CRL_verify($$) ;
sub X509_EXTENSION_get_critical($) ;
sub X509_EXTENSION_get_data($) ;
sub X509_EXTENSION_get_object($) ;
sub X509_NAME_ENTRY_get_data($) ;
sub X509_NAME_ENTRY_get_object($) ;
sub X509_NAME_add_entry_by_NID($$$$;$$) ;
sub X509_NAME_add_entry_by_OBJ($$$$;$$) ;
sub X509_NAME_add_entry_by_txt($$$$;$$) ;
sub X509_NAME_cmp($$) ;
sub X509_NAME_digest($$) ;
sub X509_NAME_entry_count($) ;
sub X509_NAME_get_entry($$) ;
sub X509_NAME_get_text_by_NID($$) ;
sub X509_NAME_hash($) ;
sub X509_NAME_new() ;
sub X509_NAME_oneline($) ;
sub X509_NAME_print_ex($;$$) ;
sub X509_REQ_add1_attr_by_NID($$$$) ;
sub X509_REQ_digest($$) ;
sub X509_REQ_free($) ;
sub X509_REQ_get_attr_by_NID($$;$) ;
sub X509_REQ_get_attr_by_OBJ($$;$) ;
sub X509_REQ_get_attr_count($) ;
sub X509_REQ_get_pubkey($) ;
sub X509_REQ_get_subject_name($) ;
sub X509_REQ_get_version($) ;
sub X509_REQ_new() ;
sub X509_REQ_set_pubkey($$) ;
sub X509_REQ_set_subject_name($$) ;
sub X509_REQ_set_version($$) ;
sub X509_REQ_sign($$$) ;
sub X509_REQ_verify($$) ;
sub X509_STORE_CTX_get_app_data($) ;
sub X509_STORE_CTX_get_current_cert($) ;
sub X509_STORE_CTX_get_error($) ;
sub X509_STORE_CTX_get_error_depth($) ;
sub X509_STORE_CTX_get_ex_data($$) ;
sub X509_STORE_CTX_get_ex_new_index($;$$$$) ;
sub X509_STORE_CTX_new() ;
sub X509_STORE_CTX_set_app_data($$) ;
sub X509_STORE_CTX_set_cert($$) ;
sub X509_STORE_CTX_set_error($$) ;
sub X509_STORE_CTX_set_ex_data($$$) ;
sub X509_STORE_add_cert($$) ;
sub X509_STORE_add_crl($$) ;
sub X509_STORE_set1_param($$) ;
sub X509_STORE_set_flags($$) ;
sub X509_STORE_set_purpose($$) ;
sub X509_STORE_set_trust($$) ;
sub X509_VERIFY_PARAM_add0_policy($$) ;
sub X509_VERIFY_PARAM_add0_table($) ;
sub X509_VERIFY_PARAM_add1_host($$) ;
sub X509_VERIFY_PARAM_clear_flags($$) ;
sub X509_VERIFY_PARAM_free($) ;
sub X509_VERIFY_PARAM_get0_peername($) ;
sub X509_VERIFY_PARAM_get_depth($) ;
sub X509_VERIFY_PARAM_get_flags($) ;
sub X509_VERIFY_PARAM_inherit($$) ;
sub X509_VERIFY_PARAM_lookup($) ;
sub X509_VERIFY_PARAM_new() ;
sub X509_VERIFY_PARAM_set1($$) ;
sub X509_VERIFY_PARAM_set1_email($$) ;
sub X509_VERIFY_PARAM_set1_host($$) ;
sub X509_VERIFY_PARAM_set1_ip($$) ;
sub X509_VERIFY_PARAM_set1_ip_asc($$) ;
sub X509_VERIFY_PARAM_set1_name($$) ;
sub X509_VERIFY_PARAM_set1_policies($$) ;
sub X509_VERIFY_PARAM_set_depth($$) ;
sub X509_VERIFY_PARAM_set_flags($$) ;
sub X509_VERIFY_PARAM_set_hostflags($$) ;
sub X509_VERIFY_PARAM_set_purpose($$) ;
sub X509_VERIFY_PARAM_set_time($$) ;
sub X509_VERIFY_PARAM_set_trust($$) ;
sub X509_VERIFY_PARAM_table_cleanup() ;
sub X509_certificate_type($;$) ;
sub X509_check_email($$;$) ;
sub X509_check_host($$;$$) ;
sub X509_check_ip($$;$) ;
sub X509_check_ip_asc($$;$) ;
sub X509_digest($$) ;
sub X509_free($) ;
sub X509_get_X509_PUBKEY($) ;
sub X509_get_app_data($) ;
sub X509_get_ex_data($$) ;
sub X509_get_ex_new_index($;$$$$) ;
sub X509_get_ext($$) ;
sub X509_get_ext_by_NID($$;$) ;
sub X509_get_ext_count($) ;
sub X509_get_fingerprint($$) ;
sub X509_get_issuer_name($) ;
sub X509_get_notAfter($) ;
sub X509_get_notBefore($) ;
sub X509_get_pubkey($) ;
sub X509_get_serialNumber($) ;
sub X509_get_subjectAltNames($) ;
sub X509_get_subject_name($) ;
sub X509_get_version($) ;
sub X509_gmtime_adj($$) ;
sub X509_issuer_and_serial_hash($) ;
sub X509_issuer_name_hash($) ;
sub X509_load_cert_crl_file($$$) ;
sub X509_load_cert_file($$$) ;
sub X509_load_crl_file($$$) ;
sub X509_new() ;
sub X509_policy_level_get0_node($$) ;
sub X509_policy_level_node_count($) ;
sub X509_policy_node_get0_parent($) ;
sub X509_policy_node_get0_policy($) ;
sub X509_policy_node_get0_qualifiers($) ;
sub X509_policy_tree_free($) ;
sub X509_policy_tree_get0_level($$) ;
sub X509_policy_tree_get0_policies($) ;
sub X509_policy_tree_get0_user_policies($) ;
sub X509_policy_tree_level_count($) ;
sub X509_pubkey_digest($$) ;
sub X509_set_app_data($$) ;
sub X509_set_ex_data($$$) ;
sub X509_set_issuer_name($$) ;
sub X509_set_pubkey($$) ;
sub X509_set_serialNumber($$) ;
sub X509_set_subject_name($$) ;
sub X509_set_version($$) ;
sub X509_sign($$$) ;
sub X509_subject_name_hash($) ;
sub X509_verify($$) ;
sub X509_verify_cert($) ;
sub X509_verify_cert_error_string($) ;
sub accept($) ;
sub add_client_CA($$) ;
sub add_dir_cert_subjects_to_stack($$) ;
sub add_file_cert_subjects_to_stack($$) ;
sub add_ssl_algorithms() ;
sub alert_desc_string($) ;
sub alert_desc_string_long($) ;
sub alert_type_string($) ;
sub alert_type_string_long($) ;
sub callback_ctrl($$$) ;
sub check_private_key($) ;
sub clear($) ;
sub clear_num_renegotiations($) ;
sub connect($) ;
sub constant($) ;
sub copy_session_id($$) ;
sub ctrl($$$$) ;
sub d2i_OCSP_REQUEST($) ;
sub d2i_OCSP_RESPONSE($) ;
sub d2i_SSL_SESSION($$$) ;
sub d2i_X509_CRL_bio($;$) ;
sub d2i_X509_REQ_bio($;$) ;
sub d2i_X509_bio($;$) ;
sub debug_read;
sub do_handshake($) ;
sub do_https2;
sub do_https3;
sub do_https4;
sub do_https;
sub do_httpx2;
sub do_httpx3;
sub do_httpx4;
sub dump_peer_certificate($) ;
sub dup($) ;
sub export_keying_material($$$$) ;
sub free($) ;
sub get0_param($) ;
sub get1_session($) ;
sub get_SSL_CTX($) ;
sub get_app_data($) ;
sub get_certificate($) ;
sub get_cipher($) ;
sub get_cipher_bits($;$) ;
sub get_cipher_list($$) ;
sub get_client_CA_list($) ;
sub get_client_random($) ;
sub get_current_cipher($) ;
sub get_default_timeout($) ;
sub get_error($$) ;
sub get_ex_data($$) ;
sub get_ex_new_index($;$$$$) ;
sub get_fd($) ;
sub get_finished($$;$) ;
sub get_http3;
sub get_http4;
sub get_http;
sub get_https3;
sub get_https4;
sub get_https;
sub get_httpx3;
sub get_httpx4;
sub get_httpx;
sub get_keyblock_size($) ;
sub get_max_proto_version($) ;
sub get_min_proto_version($) ;
sub get_mode($) ;
sub get_options($) ;
sub get_peer_cert_chain($) ;
sub get_peer_certificate($) ;
sub get_peer_finished($$;$) ;
sub get_quiet_shutdown($) ;
sub get_rbio($) ;
sub get_read_ahead($) ;
sub get_server_random($) ;
sub get_servername($;$) ;
sub get_servername_type($) ;
sub get_session($) ;
sub get_shared_ciphers($;$$) ;
sub get_shutdown($) ;
sub get_ssl_method($) ;
sub get_state($) ;
sub get_time($) ;
sub get_timeout($) ;
sub get_verify_depth($) ;
sub get_verify_mode($) ;
sub get_verify_result($) ;
sub get_wbio($) ;
sub head_http3;
sub head_http4;
sub head_http;
sub head_https3;
sub head_https4;
sub head_https;
sub head_httpx3;
sub head_httpx4;
sub head_httpx;
sub hello() ;
sub http_cat;
sub https_cat;
sub httpx_cat;
sub i2d_OCSP_REQUEST($) ;
sub i2d_OCSP_RESPONSE($) ;
sub i2d_SSL_SESSION($$) ;
sub inet_aton;
sub inet_ntoa;
sub initialize;
sub library_init() ;
sub load_client_CA_file($) ;
sub load_error_strings() ;
sub make_form;
sub make_headers;
sub new($) ;
sub new_x_ctx;
sub num_renegotiations($) ;
sub open_proxy_tcp_connection;
sub open_tcp_connection;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub peek($;$) ;
sub pending($) ;
sub post_http3;
sub post_http4;
sub post_http;
sub post_https3;
sub post_https4;
sub post_https;
sub post_httpx3;
sub post_httpx4;
sub post_httpx;
sub put_http3;
sub put_http4;
sub put_http;
sub put_https3;
sub put_https4;
sub put_https;
sub put_httpx3;
sub put_httpx4;
sub put_httpx;
sub randomize(;$$$) ;
sub read($;$) ;
sub renegotiate($) ;
sub rstate_string($) ;
sub rstate_string_long($) ;
sub session_reused($) ;
sub set1_param($$) ;
sub set_SSL_CTX($$) ;
sub set_accept_state($) ;
sub set_alpn_protos($;$) ;
sub set_app_data($$) ;
sub set_bio($$$) ;
sub set_cert_and_key($$$) ;
sub set_cipher_list($$) ;
sub set_client_CA_list($$) ;
sub set_connect_state($) ;
sub set_default_passwd_cb($;$) ;
sub set_default_passwd_cb_userdata($;$) ;
sub set_ex_data($$$) ;
sub set_fd($$) ;
sub set_info_callback($$;$) ;
sub set_max_proto_version($$) ;
sub set_min_proto_version($$) ;
sub set_mode($$) ;
sub set_options($$) ;
sub set_pref_cipher($$) ;
sub set_proxy($$;**) ;
sub set_psk_client_callback($;$) ;
sub set_purpose($$) ;
sub set_quiet_shutdown($$) ;
sub set_read_ahead($;$) ;
sub set_rfd($$) ;
sub set_server_cert_and_key($$$) ;
sub set_session($$) ;
sub set_session_id_context($$$) ;
sub set_session_secret_cb($;$$) ;
sub set_session_ticket_ext($$) ;
sub set_session_ticket_ext_cb($$;$) ;
sub set_shutdown($$) ;
sub set_ssl_method($$) ;
sub set_state($$) ;
sub set_time($$) ;
sub set_timeout($$) ;
sub set_tlsext_host_name($$) ;
sub set_tlsext_status_ocsp_resp($$) ;
sub set_tlsext_status_type($$) ;
sub set_tmp_dh($$) ;
sub set_tmp_dh_callback($$) ;
sub set_trust($$) ;
sub set_verify($$$) ;
sub set_verify_depth($$) ;
sub set_verify_result($$) ;
sub set_wfd($$) ;
sub shutdown($) ;
sub sk_X509_NAME_free($) ;
sub sk_X509_NAME_num($) ;
sub sk_X509_NAME_value($$) ;
sub sockaddr_family;
sub ssl_read_CRLF($;$) ;
sub ssl_read_all;
sub ssl_read_until($;$$) ;
sub ssl_write_CRLF($$) ;
sub ssl_write_all;
sub sslcat;
sub state($) ;
sub state_string($) ;
sub state_string_long($) ;
sub tcp_read_CRLF;
sub tcp_read_all;
sub tcp_read_until;
sub tcp_write_CRLF;
sub tcp_write_all;
sub tcpcat;
sub tcpxcat;
sub total_renegotiations($) ;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
sub use_PrivateKey($$) ;
sub use_PrivateKey_ASN1($$$$) ;
sub use_PrivateKey_file($$$) ;
sub use_RSAPrivateKey($$) ;
sub use_RSAPrivateKey_ASN1($$$) ;
sub use_RSAPrivateKey_file($$$) ;
sub use_certificate($$) ;
sub use_certificate_ASN1($$$) ;
sub use_certificate_chain_file($$) ;
sub use_certificate_file($$$) ;
sub version($) ;
sub want($) ;
sub want_X509_lookup;
sub want_nothing;
sub want_read;
sub want_write;
sub write($$) ;
sub write_partial($$$$) ;
}
package NetSNMP::ASN {
sub constant($) ;
}
package NetSNMP::OID {
sub RECEIVED_MESSAGE;
sub SNMPERR_BAD_ADDRESS;
sub SNMPERR_BAD_LOCPORT;
sub SNMPERR_BAD_SESSION;
sub SNMPERR_GENERR;
sub SNMPERR_TOO_LONG;
sub SNMP_API_SINGLE;
sub SNMP_API_TRADITIONAL;
sub SNMP_DEFAULT_ADDRESS;
sub SNMP_DEFAULT_COMMUNITY_LEN;
sub SNMP_DEFAULT_ENTERPRISE_LENGTH;
sub SNMP_DEFAULT_ERRINDEX;
sub SNMP_DEFAULT_ERRSTAT;
sub SNMP_DEFAULT_PEERNAME;
sub SNMP_DEFAULT_REMPORT;
sub SNMP_DEFAULT_REQID;
sub SNMP_DEFAULT_RETRIES;
sub SNMP_DEFAULT_TIME;
sub SNMP_DEFAULT_TIMEOUT;
sub SNMP_DEFAULT_VERSION;
sub TIMED_OUT;
sub _snmp_oid_compare($$) ;
sub constant($) ;
sub newptr($) ;
}
package NetSNMP::TrapReceiver {
sub constant($) ;
sub register($$) ;
}
package NetSNMP::agent {
sub NETSNMP_DS_AGENT_AGENTX_MASTER;
sub NETSNMP_DS_AGENT_AGENTX_PING_INTERVAL;
sub NETSNMP_DS_AGENT_AGENTX_RETRIES;
sub NETSNMP_DS_AGENT_AGENTX_TIMEOUT;
sub NETSNMP_DS_AGENT_CACHE_TIMEOUT;
sub NETSNMP_DS_AGENT_DISABLE_PERL;
sub NETSNMP_DS_AGENT_DONT_LOG_TCPWRAPPERS_CONNECTS;
sub NETSNMP_DS_AGENT_DONT_RETAIN_NOTIFICATIONS;
sub NETSNMP_DS_AGENT_FLAGS;
sub NETSNMP_DS_AGENT_GROUPID;
sub NETSNMP_DS_AGENT_INTERNAL_SECLEVEL;
sub NETSNMP_DS_AGENT_INTERNAL_SECNAME;
sub NETSNMP_DS_AGENT_INTERNAL_VERSION;
sub NETSNMP_DS_AGENT_LEAVE_PIDFILE;
sub NETSNMP_DS_AGENT_MAX_GETBULKREPEATS;
sub NETSNMP_DS_AGENT_MAX_GETBULKRESPONSES;
sub NETSNMP_DS_AGENT_NO_CACHING;
sub NETSNMP_DS_AGENT_NO_CONNECTION_WARNINGS;
sub NETSNMP_DS_AGENT_NO_ROOT_ACCESS;
sub NETSNMP_DS_AGENT_PERL_INIT_FILE;
sub NETSNMP_DS_AGENT_PORTS;
sub NETSNMP_DS_AGENT_PROGNAME;
sub NETSNMP_DS_AGENT_QUIT_IMMEDIATELY;
sub NETSNMP_DS_AGENT_ROLE;
sub NETSNMP_DS_AGENT_SKIPNFSINHOSTRESOURCES;
sub NETSNMP_DS_AGENT_STRICT_DISMAN;
sub NETSNMP_DS_AGENT_USERID;
sub NETSNMP_DS_AGENT_VERBOSE;
sub NETSNMP_DS_AGENT_X_DIR_PERM;
sub NETSNMP_DS_AGENT_X_SOCKET;
sub NETSNMP_DS_AGENT_X_SOCK_GROUP;
sub NETSNMP_DS_AGENT_X_SOCK_PERM;
sub NETSNMP_DS_AGENT_X_SOCK_USER;
sub NETSNMP_DS_APPLICATION_ID;
sub NETSNMP_DS_LIBRARY_ID;
sub NETSNMP_DS_LIB_16BIT_IDS;
sub NETSNMP_DS_LIB_2DIGIT_HEX_OUTPUT;
sub NETSNMP_DS_LIB_ALARM_DONT_USE_SIG;
sub NETSNMP_DS_LIB_APPEND_LOGFILES;
sub NETSNMP_DS_LIB_APPTYPE;
sub NETSNMP_DS_LIB_APPTYPES;
sub NETSNMP_DS_LIB_AUTHLOCALIZEDKEY;
sub NETSNMP_DS_LIB_AUTHMASTERKEY;
sub NETSNMP_DS_LIB_AUTHPASSPHRASE;
sub NETSNMP_DS_LIB_CLIENTRECVBUF;
sub NETSNMP_DS_LIB_CLIENTSENDBUF;
sub NETSNMP_DS_LIB_CLIENT_ADDR;
sub NETSNMP_DS_LIB_CLIENT_ADDR_USES_PORT;
sub NETSNMP_DS_LIB_COMMUNITY;
sub NETSNMP_DS_LIB_CONFIGURATION_DIR;
sub NETSNMP_DS_LIB_CONTEXT;
sub NETSNMP_DS_LIB_DEFAULT_PORT;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_LOAD;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_SAVE;
sub NETSNMP_DS_LIB_DONT_BREAKDOWN_OIDS;
sub NETSNMP_DS_LIB_DONT_CHECK_RANGE;
sub NETSNMP_DS_LIB_DONT_PERSIST_STATE;
sub NETSNMP_DS_LIB_DONT_PRINT_UNITS;
sub NETSNMP_DS_LIB_DONT_READ_CONFIGS;
sub NETSNMP_DS_LIB_DUMP_PACKET;
sub NETSNMP_DS_LIB_ESCAPE_QUOTES;
sub NETSNMP_DS_LIB_EXTENDED_INDEX;
sub NETSNMP_DS_LIB_HAVE_READ_CONFIG;
sub NETSNMP_DS_LIB_HAVE_READ_PREMIB_CONFIG;
sub NETSNMP_DS_LIB_HEX_OUTPUT_LENGTH;
sub NETSNMP_DS_LIB_IGNORE_NO_COMMUNITY;
sub NETSNMP_DS_LIB_KSM_KEYTAB;
sub NETSNMP_DS_LIB_KSM_SERVICE_NAME;
sub NETSNMP_DS_LIB_LOG_TIMESTAMP;
sub NETSNMP_DS_LIB_MIBDIRS;
sub NETSNMP_DS_LIB_MIB_COMMENT_TERM;
sub NETSNMP_DS_LIB_MIB_ERRORS;
sub NETSNMP_DS_LIB_MIB_PARSE_LABEL;
sub NETSNMP_DS_LIB_MIB_REPLACE;
sub NETSNMP_DS_LIB_MIB_WARNINGS;
sub NETSNMP_DS_LIB_NO_DISPLAY_HINT;
sub NETSNMP_DS_LIB_NO_TOKEN_WARNINGS;
sub NETSNMP_DS_LIB_NUMERIC_TIMETICKS;
sub NETSNMP_DS_LIB_OIDPREFIX;
sub NETSNMP_DS_LIB_OIDSUFFIX;
sub NETSNMP_DS_LIB_OID_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_OPTIONALCONFIG;
sub NETSNMP_DS_LIB_PASSPHRASE;
sub NETSNMP_DS_LIB_PERSISTENT_DIR;
sub NETSNMP_DS_LIB_PRINT_BARE_VALUE;
sub NETSNMP_DS_LIB_PRINT_FULL_OID;
sub NETSNMP_DS_LIB_PRINT_HEX_TEXT;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_OIDS;
sub NETSNMP_DS_LIB_PRINT_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_PRIVLOCALIZEDKEY;
sub NETSNMP_DS_LIB_PRIVMASTERKEY;
sub NETSNMP_DS_LIB_PRIVPASSPHRASE;
sub NETSNMP_DS_LIB_QUICKE_PRINT;
sub NETSNMP_DS_LIB_QUICK_PRINT;
sub NETSNMP_DS_LIB_RANDOM_ACCESS;
sub NETSNMP_DS_LIB_READ_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_REGEX_ACCESS;
sub NETSNMP_DS_LIB_REVERSE_ENCODE;
sub NETSNMP_DS_LIB_SAVE_MIB_DESCRS;
sub NETSNMP_DS_LIB_SBSM_LOCAL_PWD;
sub NETSNMP_DS_LIB_SECLEVEL;
sub NETSNMP_DS_LIB_SECMODEL;
sub NETSNMP_DS_LIB_SECNAME;
sub NETSNMP_DS_LIB_SERVERRECVBUF;
sub NETSNMP_DS_LIB_SERVERSENDBUF;
sub NETSNMP_DS_LIB_SNMPVERSION;
sub NETSNMP_DS_LIB_STRING_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_TEMP_FILE_PATTERN;
sub NETSNMP_DS_MAX_IDS;
sub NETSNMP_DS_MAX_SUBIDS;
sub NETSNMP_DS_NOTIF_LOG_CTX;
sub NETSNMP_DS_SMUX_SOCKET;
sub NETSNMP_DS_SNMP_VERSION_1;
sub NETSNMP_DS_SNMP_VERSION_2c;
sub NETSNMP_DS_SNMP_VERSION_3;
sub NETSNMP_DS_TOKEN_ID;
sub __agent_check_and_process(;$) ;
sub _uptime() ;
sub constant($) ;
sub errlog($$) ;
sub init_agent($) ;
sub init_master_agent() ;
sub init_mib() ;
sub init_snmp($) ;
sub netsnmp_ds_get_boolean($$) ;
sub netsnmp_ds_get_int($$) ;
sub netsnmp_ds_get_string($$) ;
sub netsnmp_ds_get_void($$) ;
sub netsnmp_ds_register_config($$$$$) ;
sub netsnmp_ds_register_premib($$$$$) ;
sub netsnmp_ds_set_boolean($$$) ;
sub netsnmp_ds_set_int($$$) ;
sub netsnmp_ds_set_string($$$) ;
sub netsnmp_ds_set_void($$$) ;
sub netsnmp_ds_shutdown() ;
sub netsnmp_ds_toggle_boolean($$) ;
sub shutdown($) ;
sub snmp_enable_stderrlog() ;
}
package NetSNMP::agent::default_store {
sub NETSNMP_DS_AGENT_AGENTX_MASTER;
sub NETSNMP_DS_AGENT_AGENTX_PING_INTERVAL;
sub NETSNMP_DS_AGENT_AGENTX_RETRIES;
sub NETSNMP_DS_AGENT_AGENTX_TIMEOUT;
sub NETSNMP_DS_AGENT_CACHE_TIMEOUT;
sub NETSNMP_DS_AGENT_DISABLE_PERL;
sub NETSNMP_DS_AGENT_DONT_LOG_TCPWRAPPERS_CONNECTS;
sub NETSNMP_DS_AGENT_DONT_RETAIN_NOTIFICATIONS;
sub NETSNMP_DS_AGENT_FLAGS;
sub NETSNMP_DS_AGENT_GROUPID;
sub NETSNMP_DS_AGENT_INTERNAL_SECLEVEL;
sub NETSNMP_DS_AGENT_INTERNAL_SECNAME;
sub NETSNMP_DS_AGENT_INTERNAL_VERSION;
sub NETSNMP_DS_AGENT_LEAVE_PIDFILE;
sub NETSNMP_DS_AGENT_MAX_GETBULKREPEATS;
sub NETSNMP_DS_AGENT_MAX_GETBULKRESPONSES;
sub NETSNMP_DS_AGENT_NO_CACHING;
sub NETSNMP_DS_AGENT_NO_CONNECTION_WARNINGS;
sub NETSNMP_DS_AGENT_NO_ROOT_ACCESS;
sub NETSNMP_DS_AGENT_PERL_INIT_FILE;
sub NETSNMP_DS_AGENT_PORTS;
sub NETSNMP_DS_AGENT_PROGNAME;
sub NETSNMP_DS_AGENT_QUIT_IMMEDIATELY;
sub NETSNMP_DS_AGENT_ROLE;
sub NETSNMP_DS_AGENT_SKIPNFSINHOSTRESOURCES;
sub NETSNMP_DS_AGENT_STRICT_DISMAN;
sub NETSNMP_DS_AGENT_USERID;
sub NETSNMP_DS_AGENT_VERBOSE;
sub NETSNMP_DS_AGENT_X_DIR_PERM;
sub NETSNMP_DS_AGENT_X_SOCKET;
sub NETSNMP_DS_AGENT_X_SOCK_GROUP;
sub NETSNMP_DS_AGENT_X_SOCK_PERM;
sub NETSNMP_DS_AGENT_X_SOCK_USER;
sub NETSNMP_DS_NOTIF_LOG_CTX;
sub NETSNMP_DS_SMUX_SOCKET;
sub constant($) ;
}
package NetSNMP::agent::netsnmp_agent_request_info {
sub getDestIp($) ;
sub getMode($) ;
sub getSourceIp($) ;
sub setMode($$) ;
}
package NetSNMP::agent::netsnmp_handler_registration {
sub DESTROY($) ;
sub new($$$) ;
sub register($) ;
}
package NetSNMP::agent::netsnmp_handler_registrationPtr {
sub getRootOID($) ;
}
package NetSNMP::agent::netsnmp_request_infoPtr {
sub getDelegated($) ;
sub getOID($) ;
sub getOIDptr($) ;
sub getProcessed($) ;
sub getRepeat($) ;
sub getStatus($) ;
sub getType($) ;
sub getValue($) ;
sub next($) ;
sub setDelegated($$) ;
sub setError($$$) ;
sub setOID($$) ;
sub setProcessed($$) ;
sub setRepeat($$) ;
sub setStatus($$) ;
sub setType($$) ;
sub setValue($$$) ;
}
package NetSNMP::default_store {
sub NETSNMP_DS_APPLICATION_ID;
sub NETSNMP_DS_LIBRARY_ID;
sub NETSNMP_DS_LIB_16BIT_IDS;
sub NETSNMP_DS_LIB_2DIGIT_HEX_OUTPUT;
sub NETSNMP_DS_LIB_ALARM_DONT_USE_SIG;
sub NETSNMP_DS_LIB_APPEND_LOGFILES;
sub NETSNMP_DS_LIB_APPTYPE;
sub NETSNMP_DS_LIB_APPTYPES;
sub NETSNMP_DS_LIB_AUTHLOCALIZEDKEY;
sub NETSNMP_DS_LIB_AUTHMASTERKEY;
sub NETSNMP_DS_LIB_AUTHPASSPHRASE;
sub NETSNMP_DS_LIB_CLIENTRECVBUF;
sub NETSNMP_DS_LIB_CLIENTSENDBUF;
sub NETSNMP_DS_LIB_CLIENT_ADDR;
sub NETSNMP_DS_LIB_CLIENT_ADDR_USES_PORT;
sub NETSNMP_DS_LIB_COMMUNITY;
sub NETSNMP_DS_LIB_CONFIGURATION_DIR;
sub NETSNMP_DS_LIB_CONTEXT;
sub NETSNMP_DS_LIB_DEFAULT_PORT;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_LOAD;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_SAVE;
sub NETSNMP_DS_LIB_DONT_BREAKDOWN_OIDS;
sub NETSNMP_DS_LIB_DONT_CHECK_RANGE;
sub NETSNMP_DS_LIB_DONT_PERSIST_STATE;
sub NETSNMP_DS_LIB_DONT_PRINT_UNITS;
sub NETSNMP_DS_LIB_DONT_READ_CONFIGS;
sub NETSNMP_DS_LIB_DUMP_PACKET;
sub NETSNMP_DS_LIB_ESCAPE_QUOTES;
sub NETSNMP_DS_LIB_EXTENDED_INDEX;
sub NETSNMP_DS_LIB_HAVE_READ_CONFIG;
sub NETSNMP_DS_LIB_HAVE_READ_PREMIB_CONFIG;
sub NETSNMP_DS_LIB_HEX_OUTPUT_LENGTH;
sub NETSNMP_DS_LIB_IGNORE_NO_COMMUNITY;
sub NETSNMP_DS_LIB_KSM_KEYTAB;
sub NETSNMP_DS_LIB_KSM_SERVICE_NAME;
sub NETSNMP_DS_LIB_LOG_TIMESTAMP;
sub NETSNMP_DS_LIB_MIBDIRS;
sub NETSNMP_DS_LIB_MIB_COMMENT_TERM;
sub NETSNMP_DS_LIB_MIB_ERRORS;
sub NETSNMP_DS_LIB_MIB_PARSE_LABEL;
sub NETSNMP_DS_LIB_MIB_REPLACE;
sub NETSNMP_DS_LIB_MIB_WARNINGS;
sub NETSNMP_DS_LIB_NO_DISPLAY_HINT;
sub NETSNMP_DS_LIB_NO_TOKEN_WARNINGS;
sub NETSNMP_DS_LIB_NUMERIC_TIMETICKS;
sub NETSNMP_DS_LIB_OIDPREFIX;
sub NETSNMP_DS_LIB_OIDSUFFIX;
sub NETSNMP_DS_LIB_OID_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_OPTIONALCONFIG;
sub NETSNMP_DS_LIB_PASSPHRASE;
sub NETSNMP_DS_LIB_PERSISTENT_DIR;
sub NETSNMP_DS_LIB_PRINT_BARE_VALUE;
sub NETSNMP_DS_LIB_PRINT_FULL_OID;
sub NETSNMP_DS_LIB_PRINT_HEX_TEXT;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_OIDS;
sub NETSNMP_DS_LIB_PRINT_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_PRIVLOCALIZEDKEY;
sub NETSNMP_DS_LIB_PRIVMASTERKEY;
sub NETSNMP_DS_LIB_PRIVPASSPHRASE;
sub NETSNMP_DS_LIB_QUICKE_PRINT;
sub NETSNMP_DS_LIB_QUICK_PRINT;
sub NETSNMP_DS_LIB_RANDOM_ACCESS;
sub NETSNMP_DS_LIB_READ_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_REGEX_ACCESS;
sub NETSNMP_DS_LIB_REVERSE_ENCODE;
sub NETSNMP_DS_LIB_SAVE_MIB_DESCRS;
sub NETSNMP_DS_LIB_SBSM_LOCAL_PWD;
sub NETSNMP_DS_LIB_SECLEVEL;
sub NETSNMP_DS_LIB_SECMODEL;
sub NETSNMP_DS_LIB_SECNAME;
sub NETSNMP_DS_LIB_SERVERRECVBUF;
sub NETSNMP_DS_LIB_SERVERSENDBUF;
sub NETSNMP_DS_LIB_SNMPVERSION;
sub NETSNMP_DS_LIB_STRING_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_TEMP_FILE_PATTERN;
sub NETSNMP_DS_MAX_IDS;
sub NETSNMP_DS_MAX_SUBIDS;
sub NETSNMP_DS_SNMP_VERSION_1;
sub NETSNMP_DS_SNMP_VERSION_2c;
sub NETSNMP_DS_SNMP_VERSION_3;
sub NETSNMP_DS_TOKEN_ID;
sub constant($) ;
sub netsnmp_ds_get_boolean($$) ;
sub netsnmp_ds_get_int($$) ;
sub netsnmp_ds_get_string($$) ;
sub netsnmp_ds_get_void($$) ;
sub netsnmp_ds_register_config($$$$$) ;
sub netsnmp_ds_register_premib($$$$$) ;
sub netsnmp_ds_set_boolean($$$) ;
sub netsnmp_ds_set_int($$$) ;
sub netsnmp_ds_set_string($$$) ;
sub netsnmp_ds_set_void($$$) ;
sub netsnmp_ds_shutdown() ;
sub netsnmp_ds_toggle_boolean($$) ;
}
package ODBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Opcode {
sub _safe_call_sv($$$) ;
sub _safe_pkg_prep($) ;
sub define_optag($$) ;
sub deny($;@) ;
sub deny_only($;@) ;
sub empty_opset() ;
sub full_opset() ;
sub invert_opset($) ;
sub opcodes() ;
sub opdesc(;@) ;
sub opmask() ;
sub opmask_add($) ;
sub opset(;@) ;
sub opset_to_ops($;$) ;
sub permit($;@) ;
sub permit_only($;@) ;
sub verify_opset($;$) ;
}
package POSIX {
sub ARG_MAX() ;
sub CHILD_MAX() ;
sub CLK_TCK() ;
sub EOTHER() ;
sub EPROCLIM() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub L_tmpnam;
sub OPEN_MAX() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TZNAME_MAX() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub _exit;
sub abort;
sub abs;
sub access;
sub acos;
sub acosh;
sub alarm;
sub asctime;
sub asin;
sub asinh;
sub assert;
sub atan2;
sub atan;
sub atanh;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub cbrt;
sub ceil;
sub chdir;
sub chmod;
sub chown;
sub clearerr;
sub clock;
sub close;
sub closedir;
sub constant;
sub copysign;
sub cos;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub erf;
sub erfc;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub exit;
sub exp2;
sub exp;
sub expm1;
sub fabs;
sub fclose;
sub fcntl;
sub fdim;
sub fdopen;
sub fegetround;
sub feof;
sub ferror;
sub fesetround;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub fileno;
sub floor;
sub fma;
sub fmax;
sub fmin;
sub fmod;
sub fopen;
sub fork;
sub fpathconf;
sub fpclassify;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getc;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgrgid;
sub getgrnam;
sub getgroups;
sub getlogin;
sub getpayload;
sub getpgrp;
sub getpid;
sub getppid;
sub getpwnam;
sub getpwuid;
sub gets;
sub getuid;
sub gmtime;
sub hypot;
sub ilogb;
sub isatty;
sub isfinite;
sub isgreater;
sub isgreaterequal;
sub isinf;
sub isless;
sub islessequal;
sub islessgreater;
sub isnan;
sub isnormal;
sub issignaling;
sub isunordered;
sub j0;
sub j1;
sub jn;
sub kill;
sub labs;
sub lchown;
sub ldexp;
sub ldiv;
sub lgamma;
sub link;
sub localeconv;
sub localtime;
sub log10;
sub log1p;
sub log2;
sub log;
sub logb;
sub longjmp;
sub lrint;
sub lround;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkdir;
sub mkfifo;
sub mktime;
sub modf;
sub nan;
sub nearbyint;
sub nextafter;
sub nexttoward;
sub nice;
sub offsetof;
sub open;
sub opendir;
sub pathconf;
sub pause;
sub pipe;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub rand;
sub read;
sub readdir;
sub realloc;
sub remainder;
sub remove;
sub remquo;
sub rename;
sub rewind;
sub rewinddir;
sub rint;
sub rmdir;
sub round;
sub scalbn;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpayload;
sub setpayloadsig;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signbit;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sin;
sub sinh;
sub sleep;
sub sqrt;
sub srand;
sub sscanf;
sub stat;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtold;
sub strtoul;
sub strxfrm;
sub sysconf;
sub system;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetpgrp;
sub tgamma;
sub time;
sub times;
sub tmpfile;
sub tmpnam;
sub trunc;
sub ttyname;
sub tzname;
sub tzset;
sub umask;
sub uname;
sub ungetc;
sub unlink;
sub utime;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wait;
sub waitpid;
sub wcstombs;
sub wctomb;
sub write;
sub y0;
sub y1;
sub yn;
}
package POSIX::SigSet {
sub addset;
sub delset;
sub emptyset;
sub fillset;
sub ismember;
sub new;
}
package POSIX::Termios {
sub getattr;
sub getcc;
sub getcflag;
sub getiflag;
sub getispeed;
sub getlflag;
sub getoflag;
sub getospeed;
sub new;
sub setattr;
sub setcc;
sub setcflag;
sub setiflag;
sub setispeed;
sub setlflag;
sub setoflag;
sub setospeed;
}
package PerlIO {
sub get_layers(*;@) ;
}
package PerlIO::Layer {
sub NoWarnings;
sub find;
}
package Regexp {
sub DESTROY() ;
}
package SDBM_File {
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub sdbm_clearerr;
}
package SNMP {
sub NETSNMP_DS_APPLICATION_ID;
sub NETSNMP_DS_LIBRARY_ID;
sub NETSNMP_DS_LIB_16BIT_IDS;
sub NETSNMP_DS_LIB_2DIGIT_HEX_OUTPUT;
sub NETSNMP_DS_LIB_ALARM_DONT_USE_SIG;
sub NETSNMP_DS_LIB_APPEND_LOGFILES;
sub NETSNMP_DS_LIB_APPTYPE;
sub NETSNMP_DS_LIB_APPTYPES;
sub NETSNMP_DS_LIB_AUTHLOCALIZEDKEY;
sub NETSNMP_DS_LIB_AUTHMASTERKEY;
sub NETSNMP_DS_LIB_AUTHPASSPHRASE;
sub NETSNMP_DS_LIB_CLIENTRECVBUF;
sub NETSNMP_DS_LIB_CLIENTSENDBUF;
sub NETSNMP_DS_LIB_CLIENT_ADDR;
sub NETSNMP_DS_LIB_CLIENT_ADDR_USES_PORT;
sub NETSNMP_DS_LIB_COMMUNITY;
sub NETSNMP_DS_LIB_CONFIGURATION_DIR;
sub NETSNMP_DS_LIB_CONTEXT;
sub NETSNMP_DS_LIB_DEFAULT_PORT;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_LOAD;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_SAVE;
sub NETSNMP_DS_LIB_DONT_BREAKDOWN_OIDS;
sub NETSNMP_DS_LIB_DONT_CHECK_RANGE;
sub NETSNMP_DS_LIB_DONT_PERSIST_STATE;
sub NETSNMP_DS_LIB_DONT_PRINT_UNITS;
sub NETSNMP_DS_LIB_DONT_READ_CONFIGS;
sub NETSNMP_DS_LIB_DUMP_PACKET;
sub NETSNMP_DS_LIB_ESCAPE_QUOTES;
sub NETSNMP_DS_LIB_EXTENDED_INDEX;
sub NETSNMP_DS_LIB_HAVE_READ_CONFIG;
sub NETSNMP_DS_LIB_HAVE_READ_PREMIB_CONFIG;
sub NETSNMP_DS_LIB_HEX_OUTPUT_LENGTH;
sub NETSNMP_DS_LIB_IGNORE_NO_COMMUNITY;
sub NETSNMP_DS_LIB_KSM_KEYTAB;
sub NETSNMP_DS_LIB_KSM_SERVICE_NAME;
sub NETSNMP_DS_LIB_LOG_TIMESTAMP;
sub NETSNMP_DS_LIB_MIBDIRS;
sub NETSNMP_DS_LIB_MIB_COMMENT_TERM;
sub NETSNMP_DS_LIB_MIB_ERRORS;
sub NETSNMP_DS_LIB_MIB_PARSE_LABEL;
sub NETSNMP_DS_LIB_MIB_REPLACE;
sub NETSNMP_DS_LIB_MIB_WARNINGS;
sub NETSNMP_DS_LIB_NO_DISPLAY_HINT;
sub NETSNMP_DS_LIB_NO_TOKEN_WARNINGS;
sub NETSNMP_DS_LIB_NUMERIC_TIMETICKS;
sub NETSNMP_DS_LIB_OIDPREFIX;
sub NETSNMP_DS_LIB_OIDSUFFIX;
sub NETSNMP_DS_LIB_OID_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_OPTIONALCONFIG;
sub NETSNMP_DS_LIB_PASSPHRASE;
sub NETSNMP_DS_LIB_PERSISTENT_DIR;
sub NETSNMP_DS_LIB_PRINT_BARE_VALUE;
sub NETSNMP_DS_LIB_PRINT_FULL_OID;
sub NETSNMP_DS_LIB_PRINT_HEX_TEXT;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_OIDS;
sub NETSNMP_DS_LIB_PRINT_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_PRIVLOCALIZEDKEY;
sub NETSNMP_DS_LIB_PRIVMASTERKEY;
sub NETSNMP_DS_LIB_PRIVPASSPHRASE;
sub NETSNMP_DS_LIB_QUICKE_PRINT;
sub NETSNMP_DS_LIB_QUICK_PRINT;
sub NETSNMP_DS_LIB_RANDOM_ACCESS;
sub NETSNMP_DS_LIB_READ_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_REGEX_ACCESS;
sub NETSNMP_DS_LIB_REVERSE_ENCODE;
sub NETSNMP_DS_LIB_SAVE_MIB_DESCRS;
sub NETSNMP_DS_LIB_SBSM_LOCAL_PWD;
sub NETSNMP_DS_LIB_SECLEVEL;
sub NETSNMP_DS_LIB_SECMODEL;
sub NETSNMP_DS_LIB_SECNAME;
sub NETSNMP_DS_LIB_SERVERRECVBUF;
sub NETSNMP_DS_LIB_SERVERSENDBUF;
sub NETSNMP_DS_LIB_SNMPVERSION;
sub NETSNMP_DS_LIB_STRING_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_TEMP_FILE_PATTERN;
sub NETSNMP_DS_MAX_IDS;
sub NETSNMP_DS_MAX_SUBIDS;
sub NETSNMP_DS_SNMP_VERSION_1;
sub NETSNMP_DS_SNMP_VERSION_2c;
sub NETSNMP_DS_SNMP_VERSION_3;
sub NETSNMP_DS_TOKEN_ID;
sub RECEIVED_MESSAGE;
sub SNMPERR_BAD_ADDRESS;
sub SNMPERR_BAD_LOCPORT;
sub SNMPERR_BAD_SESSION;
sub SNMPERR_GENERR;
sub SNMPERR_TOO_LONG;
sub SNMP_API_SINGLE;
sub SNMP_API_TRADITIONAL;
sub SNMP_DEFAULT_ADDRESS;
sub SNMP_DEFAULT_COMMUNITY_LEN;
sub SNMP_DEFAULT_ENTERPRISE_LENGTH;
sub SNMP_DEFAULT_ERRINDEX;
sub SNMP_DEFAULT_ERRSTAT;
sub SNMP_DEFAULT_PEERNAME;
sub SNMP_DEFAULT_REMPORT;
sub SNMP_DEFAULT_REQID;
sub SNMP_DEFAULT_RETRIES;
sub SNMP_DEFAULT_TIME;
sub SNMP_DEFAULT_TIMEOUT;
sub SNMP_DEFAULT_VERSION;
sub TIMED_OUT;
sub _add_mib_dir;
sub _api_mode;
sub _bulkwalk;
sub _catch;
sub _check_timeout;
sub _debug_internals;
sub _dump_packet;
sub _get;
sub _get_select_info;
sub _get_type;
sub _getbulk;
sub _getenv;
sub _getnext;
sub _inform;
sub _init_mib_internals;
sub _main_loop;
sub _mainloop_finish;
sub _map_enum;
sub _mib_toggle_options;
sub _new_session;
sub _new_tunneled_session;
sub _new_v3_session;
sub _read_mib;
sub _read_module;
sub _read_on_fd;
sub _register_debug_tokens;
sub _set;
sub _set_debugging;
sub _set_replace_newer;
sub _set_save_descriptions;
sub _setenv;
sub _sock_cleanup;
sub _sys_uptime;
sub _translate_obj;
sub _trapV1;
sub _trapV2;
sub _update_session;
sub constant;
sub init_snmp;
sub netsnmp_ds_get_boolean($$) ;
sub netsnmp_ds_get_int($$) ;
sub netsnmp_ds_get_string($$) ;
sub netsnmp_ds_get_void($$) ;
sub netsnmp_ds_register_config($$$$$) ;
sub netsnmp_ds_register_premib($$$$$) ;
sub netsnmp_ds_set_boolean($$$) ;
sub netsnmp_ds_set_int($$$) ;
sub netsnmp_ds_set_string($$$) ;
sub netsnmp_ds_set_void($$$) ;
sub netsnmp_ds_shutdown() ;
sub netsnmp_ds_toggle_boolean($$) ;
}
package SNMP::MIB::NODE {
sub FETCH;
sub TIEHASH;
}
package Scalar::Util {
sub blessed($) ;
sub dualvar($$) ;
sub isdual($) ;
sub isvstring($) ;
sub isweak($) ;
sub looks_like_number($) ;
sub openhandle($) ;
sub readonly($) ;
sub refaddr($) ;
sub reftype($) ;
sub tainted($) ;
sub unweaken($) ;
sub weaken($) ;
}
package SnmpSessionPtr {
sub DESTROY;
}
package Socket {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CCITT() ;
sub AF_CHAOS() ;
sub AF_CTF() ;
sub AF_DATAKIT() ;
sub AF_DLI() ;
sub AF_ECMA() ;
sub AF_GOSIP() ;
sub AF_HYLINK() ;
sub AF_IMPLINK() ;
sub AF_ISO() ;
sub AF_LAST() ;
sub AF_LAT() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_NS() ;
sub AF_OSI() ;
sub AF_OSINET() ;
sub AF_PUP() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AUTOLOAD;
sub EAI_BADHINTS() ;
sub EAI_PROTOCOL() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_EOF() ;
sub MSG_ETAG() ;
sub MSG_MAXIOVLEN() ;
sub MSG_MCAST() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CCITT() ;
sub PF_CHAOS() ;
sub PF_CTF() ;
sub PF_DATAKIT() ;
sub PF_DLI() ;
sub PF_ECMA() ;
sub PF_GOSIP() ;
sub PF_HYLINK() ;
sub PF_IMPLINK() ;
sub PF_ISO() ;
sub PF_LAST() ;
sub PF_LAT() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_NS() ;
sub PF_OSI() ;
sub PF_OSINET() ;
sub PF_PUP() ;
sub PF_USER() ;
sub PF_WAN() ;
sub SCM_CONNECT() ;
sub SCM_CREDS() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DONTLINGER() ;
sub SO_FAMILY() ;
sub SO_PASSIFNAME() ;
sub SO_PROTOTYPE() ;
sub SO_STATE() ;
sub SO_USELOOPBACK() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_MAXRT() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Storable {
sub dclone($) ;
sub init_perinterp() ;
sub is_retrieving() ;
sub is_storing() ;
sub last_op_in_netorder() ;
sub mretrieve($;$) ;
sub mstore($) ;
sub net_mstore($) ;
sub net_pstore($$) ;
sub pretrieve($;$) ;
sub pstore($$) ;
sub stack_depth() ;
sub stack_depth_hash() ;
}
package Sub::Util {
sub set_prototype;
sub set_subname;
sub subname;
}
package Sys::Hostname {
sub ghname;
}
package Sys::Syslog {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CCITT() ;
sub AF_CHAOS() ;
sub AF_CTF() ;
sub AF_DATAKIT() ;
sub AF_DLI() ;
sub AF_ECMA() ;
sub AF_GOSIP() ;
sub AF_HYLINK() ;
sub AF_IMPLINK() ;
sub AF_ISO() ;
sub AF_LAST() ;
sub AF_LAT() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_NS() ;
sub AF_OSI() ;
sub AF_OSINET() ;
sub AF_PUP() ;
sub AF_USER() ;
sub AF_WAN() ;
sub EAI_BADHINTS() ;
sub EAI_PROTOCOL() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub LOG_FAC;
sub LOG_MAKEPRI;
sub LOG_MASK;
sub LOG_PRI;
sub LOG_UPTO;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_EOF() ;
sub MSG_ETAG() ;
sub MSG_MAXIOVLEN() ;
sub MSG_MCAST() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CCITT() ;
sub PF_CHAOS() ;
sub PF_CTF() ;
sub PF_DATAKIT() ;
sub PF_DLI() ;
sub PF_ECMA() ;
sub PF_GOSIP() ;
sub PF_HYLINK() ;
sub PF_IMPLINK() ;
sub PF_ISO() ;
sub PF_LAST() ;
sub PF_LAT() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_NS() ;
sub PF_OSI() ;
sub PF_OSINET() ;
sub PF_PUP() ;
sub PF_USER() ;
sub PF_WAN() ;
sub SCM_CONNECT() ;
sub SCM_CREDS() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DONTLINGER() ;
sub SO_FAMILY() ;
sub SO_PASSIFNAME() ;
sub SO_PROTOTYPE() ;
sub SO_STATE() ;
sub SO_USELOOPBACK() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_MAXRT() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub closelog_xs;
sub constant;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub openlog_xs;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub setlocale;
sub setlogmask_xs;
sub sockaddr_family;
sub strftime;
sub syslog_xs;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Term::ReadKey {
sub GetControlChars;
sub GetSpeed;
sub GetTermSizeGSIZE;
sub GetTermSizeGWINSZ;
sub GetTermSizeVIO;
sub GetTermSizeWin32;
sub SetControlChars;
sub SetReadMode;
sub SetTerminalSize;
sub Win32PeekChar;
sub blockoptions;
sub pollfile;
sub selectfile;
sub setnodelay;
sub termoptions;
sub termsizeoptions;
}
package Tie::Hash::NamedCapture {
sub CLEAR;
sub DELETE;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub SCALAR;
sub STORE;
sub TIEHASH;
sub _tie_it;
sub flags;
}
package Time::HiRes {
sub alarm($;$) ;
sub clock() ;
sub clock_getres(;$) ;
sub clock_gettime(;$) ;
sub clock_nanosleep($$;$) ;
sub constant($) ;
sub getitimer($) ;
sub gettimeofday() ;
sub lstat(;$) ;
sub nanosleep($) ;
sub setitimer($$;$) ;
sub sleep(;@) ;
sub stat(;$) ;
sub time() ;
sub ualarm($;$) ;
sub usleep($) ;
sub utime($$@) ;
}
package Time::Piece {
sub _crt_gmtime($) ;
sub _crt_localtime($) ;
sub _get_localization() ;
sub _mini_mktime($$$$$$) ;
sub _strftime($$;$) ;
sub _strptime($$$$) ;
sub _tzset() ;
sub blessed($) ;
}
package UNIVERSAL {
sub DOES;
sub VERSION;
sub can;
sub isa;
}
package Unicode::Collate {
sub _decompHangul;
sub _derivCE_14;
sub _derivCE_18;
sub _derivCE_20;
sub _derivCE_22;
sub _derivCE_24;
sub _derivCE_32;
sub _derivCE_34;
sub _derivCE_36;
sub _derivCE_8;
sub _derivCE_9;
sub _exists_simple;
sub _fetch_rest;
sub _fetch_simple;
sub _getHexArray;
sub _ignorable_simple;
sub _isIllegal;
sub _isUIdeo;
sub _uideoCE_8;
sub getHST;
sub mk_SortKey;
sub varCE;
sub visualizeSortKey;
}
package Unicode::Normalize {
sub FCC($) ;
sub NFC($) ;
sub NFD($) ;
sub NFKC($) ;
sub NFKD($) ;
sub checkFCC($) ;
sub checkFCD($) ;
sub checkNFC($) ;
sub checkNFD($) ;
sub checkNFKC($) ;
sub checkNFKD($) ;
sub compose($) ;
sub composeContiguous($) ;
sub decompose($;$) ;
sub getCanon($) ;
sub getCombinClass($) ;
sub getCompat($) ;
sub getComposite($$) ;
sub isComp2nd($) ;
sub isComp_Ex($) ;
sub isExclusion($) ;
sub isNFC_MAYBE($) ;
sub isNFC_NO($) ;
sub isNFD_NO($) ;
sub isNFKC_MAYBE($) ;
sub isNFKC_NO($) ;
sub isNFKD_NO($) ;
sub isNonStDecomp($) ;
sub isSingleton($) ;
sub reorder($) ;
sub splitOnLastStarter;
}
package attributes {
sub _fetch_attrs($) ;
sub _guess_stash($) ;
sub _modify_attrs;
sub reftype($) ;
}
package bytes {
sub chr(_) ;
sub index($$;$) ;
sub length(_) ;
sub ord(_) ;
sub rindex($$;$) ;
sub substr($$;$$) ;
}
package constant {
sub _make_const(\[$@]) ;
}
package mro {
sub _nextcan;
sub get_isarev($) ;
sub get_linear_isa($;$) ;
sub get_mro($) ;
sub get_pkg_gen($) ;
sub invalidate_all_method_caches() ;
sub is_universal($) ;
sub method_changed_in($) ;
sub set_mro($$) ;
}
package netsnmp_oidPtr {
sub DESTROY($) ;
sub append($$) ;
sub append_oid($$) ;
sub clone($) ;
sub get_indexes($) ;
sub length($) ;
sub to_array($) ;
sub to_string($) ;
}
package re {
sub install;
sub is_regexp($) ;
sub regexp_pattern($) ;
sub regmust($) ;
sub regname(;$$) ;
sub regnames(;$) ;
sub regnames_count() ;
}
package threads {
sub DESTROY;
sub _handle;
sub create;
sub detach;
sub equal;
sub error;
sub get_stack_size;
sub is_detached;
sub is_joinable;
sub is_running;
sub join;
sub kill;
sub list;
sub new;
sub object;
sub self;
sub set_stack_size;
sub set_thread_exit_only;
sub tid;
sub wantarray;
sub yield;
}
package threads::shared {
sub _id(\[$@%]) ;
sub _refcnt(\[$@%]) ;
sub bless($;$) ;
sub blessed($) ;
sub cond_broadcast(\[$@%]) ;
sub cond_signal(\[$@%]) ;
sub cond_timedwait(\[$@%]$;\[$@%]) ;
sub cond_wait(\[$@%];\[$@%]) ;
sub is_shared(\[$@%]) ;
sub refaddr($) ;
sub reftype($) ;
sub share(\[$@%]) ;
}
package threads::shared::tie {
sub EXISTS;
sub EXTEND;
sub FIRSTKEY;
sub NEXTKEY;
sub POP;
sub PUSH;
sub SHIFT;
sub STORESIZE;
sub UNSHIFT;
}
package utf8 {
sub decode;
sub downgrade;
sub encode;
sub is_utf8;
sub native_to_unicode;
sub unicode_to_native;
sub upgrade;
sub valid;
}
package version {
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
sub vcmp;
}
